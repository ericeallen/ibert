[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ibert"
version = "0.1.0"
description = "Multi-task code generation system for lazy-evaluated DSLs, targeting Ibis (Pythonâ†’SQL)"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "Apache-2.0"}
authors = [
    {name = "iBERT Contributors"}
]
keywords = [
    "ibis",
    "sql",
    "code-generation",
    "llm",
    "training-data",
    "dsl",
    "compiler",
    "lora",
    "fine-tuning"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Software Development :: Compilers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "accelerate>=0.20.0",
    "atpublic==6.0.2",
    "bitsandbytes>=0.41.0",
    "duckdb==1.4.1",
    "ibis-framework==11.0.0",
    "markdown-it-py==4.0.0",
    "numpy>=2.0.0",
    "pandas>=2.0.0",
    "parsy==2.2",
    "protobuf>=3.20.0",
    "pyarrow==21.0.0",
    "PyYAML==6.0.3",
    "rich==14.2.0",
    "sentencepiece>=0.1.99",
    "sqlglot==27.27.0",
    "torch>=2.0.0",
    "tqdm>=4.65.0",
    "transformers>=4.30.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.1",
    "pytest-xdist>=3.3.1",
    "pytest-timeout>=2.1.0",
    "pytest-randomly>=3.13.0",
    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    # Type stubs
    "types-PyYAML",
    "types-requests",
]

[project.scripts]
ibert-complete = "ibert.cli.complete:main"
ibert-qa = "ibert.cli.qa:main"
ibert-to-sql = "ibert.cli.to_sql:main"
ibert-from-sql = "ibert.cli.from_sql:main"
ibert-fix = "ibert.cli.fix:main"
ibert-doc = "ibert.cli.doc:main"

[project.urls]
Homepage = "https://github.com/yourusername/ibert"
Documentation = "https://github.com/yourusername/ibert#readme"
Repository = "https://github.com/yourusername/ibert.git"
Issues = "https://github.com/yourusername/ibert/issues"

[tool.setuptools]
packages = ["ibert", "ibert.models", "ibert.tasks", "ibert.config"]
package-dir = {"" = "src"}

[tool.setuptools.package-data]
ibert = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py313"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.venv
  | build
  | dist
  | data/mining
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
skip_gitignore = true
extend_skip_glob = ["data/mining/*"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py313"
extend-exclude = ["data/mining"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports
"tests/**/*.py" = ["ARG", "S"]  # unused arguments, security

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/.venv/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Mypy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Start permissive, tighten over time
ignore_missing_imports = true
namespace_packages = false
mypy_path = "."

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
