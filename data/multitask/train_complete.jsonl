{"id": "df742037-df4b-4747-9467-fa00fe23605a", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"partial_code": "table.filter(table.age >"}, "target": {"completed_code": "table.filter(table.age > 18)", "explanation": "Complete numeric comparison filter"}, "meta": {"template": "filter_completion", "variation": "simple_numeric_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "0d80303a-b2b3-48c7-905d-80c4fd6ebfd9", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"is_active": "boolean", "age": "int64"}}}}, "input": {"partial_code": "table.filter(table.is_active &"}, "target": {"completed_code": "table.filter(table.is_active & (table.age > 21))", "explanation": "Complete compound boolean filter"}, "meta": {"template": "filter_completion", "variation": "boolean_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "ce8d6072-e499-41e8-96f6-9e718c9153ab", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"name": "string", "email": "string"}}}}, "input": {"partial_code": "table.filter(table.name.like("}, "target": {"completed_code": "table.filter(table.name.like('%John%'))", "explanation": "Complete string pattern matching"}, "meta": {"template": "filter_completion", "variation": "string_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "81677a66-1217-473e-85c6-45e42978b415", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"user_id": "int64", "amount": "float64", "timestamp": "timestamp"}}}}, "input": {"partial_code": "table.filter(table.amount > 100).select("}, "target": {"completed_code": "table.filter(table.amount > 100).select('user_id', 'amount')", "explanation": "Complete column selection after filter"}, "meta": {"template": "filter_completion", "variation": "select_after_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "34a447f4-e0d8-49d2-86e4-6c5dd8e2be09", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"category": "string", "region": "string", "amount": "float64"}}}}, "input": {"partial_code": "table.filter(table.category == 'sales').group_by("}, "target": {"completed_code": "table.filter(table.category == 'sales').group_by('region').agg(total=table.amount.sum())", "explanation": "Complete aggregation after filter"}, "meta": {"template": "filter_completion", "variation": "groupby_after_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "87a3e21c-d5ea-47f8-94b9-84bf1657af0e", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"created_at": "timestamp", "user_id": "int64"}}}}, "input": {"partial_code": "table.filter(table.created_at >"}, "target": {"completed_code": "table.filter(table.created_at > '2024-01-01')", "explanation": "Complete temporal comparison"}, "meta": {"template": "filter_completion", "variation": "temporal_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "bdd9b84f-3cf9-4645-8a1a-74a0fba2313d", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"email": "string", "phone": "string"}}}}, "input": {"partial_code": "table.filter(table.email.notnull("}, "target": {"completed_code": "table.filter(table.email.notnull())", "explanation": "Complete null checking method"}, "meta": {"template": "filter_completion", "variation": "null_check", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "7231016d-da46-4372-960d-da957d740530", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"status": "string", "user_id": "int64"}}}}, "input": {"partial_code": "table.filter(table.status.isin(["}, "target": {"completed_code": "table.filter(table.status.isin(['active', 'pending']))", "explanation": "Complete membership test"}, "meta": {"template": "filter_completion", "variation": "isin_filter", "difficulty": "easy", "features": ["filter", "completion", "predicates"]}}
{"id": "f250c531-280e-44bd-a606-30d4790c6ef0", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64", "quantity": "int64"}}}}, "input": {"partial_code": "table.group_by('category').agg("}, "target": {"completed_code": "table.group_by('category').agg(total=table.amount.sum())"}, "meta": {"template": "aggregation_completion", "variation": "simple_groupby", "difficulty": "medium", "features": ["aggregation", "group_by", "completion"]}}
{"id": "4151023c-715b-4b9b-b9d3-920fca6c6699", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"region": "string", "sales": "float64", "price": "float64"}}}}, "input": {"partial_code": "table.group_by('region').agg(total_sales=table.sales.sum(), avg_price="}, "target": {"completed_code": "table.group_by('region').agg(total_sales=table.sales.sum(), avg_price=table.price.mean())"}, "meta": {"template": "aggregation_completion", "variation": "multiple_aggregations", "difficulty": "medium", "features": ["aggregation", "group_by", "completion"]}}
{"id": "d61597fb-d0aa-4407-a24a-3147a39a0b73", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"user_id": "int64", "event_type": "string"}}}}, "input": {"partial_code": "table.group_by('user_id').agg(event_count="}, "target": {"completed_code": "table.group_by('user_id').agg(event_count=table.count())"}, "meta": {"template": "aggregation_completion", "variation": "count_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "completion"]}}
{"id": "68cade30-49f7-4bff-9827-4a8bfbe9e145", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"region": "string", "category": "string", "amount": "float64"}}}}, "input": {"partial_code": "table.group_by(['region', 'category']).agg("}, "target": {"completed_code": "table.group_by(['region', 'category']).agg(total=table.amount.sum())"}, "meta": {"template": "aggregation_completion", "variation": "multiple_groupby_keys", "difficulty": "medium", "features": ["aggregation", "group_by", "completion"]}}
{"id": "93a3a24a-50a0-4b30-b6cd-53d3dcd67574", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"partial_code": "table.group_by('category').agg(high_value_count=(table.amount > 100).sum("}, "target": {"completed_code": "table.group_by('category').agg(high_value_count=(table.amount > 100).sum())"}, "meta": {"template": "aggregation_completion", "variation": "conditional_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "completion"]}}
{"id": "aa70d9a9-230f-4b7b-b02f-e838cce57a76", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"orders": {"schema": {"order_id": "int64", "customer_id": "int64", "amount": "float64"}}, "customers": {"schema": {"customer_id": "int64", "name": "string"}}}}, "input": {"partial_code": "orders.join(customers, orders.customer_id =="}, "target": {"completed_code": "orders.join(customers, orders.customer_id == customers.customer_id)"}, "meta": {"template": "join_completion", "variation": "inner_join_simple", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "d11f15a6-9ed1-4fe3-afe4-0199ae4540f3", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"users": {"schema": {"user_id": "int64", "email": "string"}}, "profiles": {"schema": {"user_id": "int64", "bio": "string"}}}}, "input": {"partial_code": "users.left_join(profiles,"}, "target": {"completed_code": "users.left_join(profiles, users.user_id == profiles.user_id)"}, "meta": {"template": "join_completion", "variation": "left_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "e775f16c-b14f-40f2-beb0-d3c6a4f22084", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"sales_a": {"schema": {"region": "string", "quarter": "int64", "amount": "float64"}}, "sales_b": {"schema": {"region": "string", "quarter": "int64", "units": "int64"}}}}, "input": {"partial_code": "sales_a.join(sales_b, (sales_a.region == sales_b.region) &"}, "target": {"completed_code": "sales_a.join(sales_b, (sales_a.region == sales_b.region) & (sales_a.quarter == sales_b.quarter))"}, "meta": {"template": "join_completion", "variation": "join_multiple_conditions", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "883998ec-6a6b-4dca-ab6f-935025c74369", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"actual": {"schema": {"region": "string", "sales": "float64"}}, "targets": {"schema": {"region": "string", "target": "float64"}}}}, "input": {"partial_code": "actual.outer_join(targets,"}, "target": {"completed_code": "actual.outer_join(targets, actual.region == targets.region)"}, "meta": {"template": "join_completion", "variation": "outer_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "ee97eb32-278c-4efc-b292-698843de3830", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"customers": {"schema": {"customer_id": "int64", "name": "string"}}, "orders": {"schema": {"customer_id": "int64", "order_id": "int64"}}}}, "input": {"partial_code": "customers.anti_join(orders,"}, "target": {"completed_code": "customers.anti_join(orders, customers.customer_id == orders.customer_id)"}, "meta": {"template": "join_completion", "variation": "anti_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "d8044bd0-cacf-465e-a9bd-7d2fe9d75585", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"products": {"schema": {"product_id": "int64", "name": "string"}}, "recent_orders": {"schema": {"product_id": "int64", "order_date": "timestamp"}}}}, "input": {"partial_code": "products.semi_join(recent_orders,"}, "target": {"completed_code": "products.semi_join(recent_orders, products.product_id == recent_orders.product_id)"}, "meta": {"template": "join_completion", "variation": "semi_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "5c856b0e-a1be-490b-81c4-caaeffc46a80", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"orders": {"schema": {"order_id": "int64", "customer_id": "int64", "product_id": "int64"}}, "customers": {"schema": {"customer_id": "int64", "name": "string"}}, "products": {"schema": {"product_id": "int64", "name": "string"}}}}, "input": {"partial_code": "orders.join(customers, orders.customer_id == customers.customer_id).join(products,"}, "target": {"completed_code": "orders.join(customers, orders.customer_id == customers.customer_id).join(products, orders.product_id == products.product_id)"}, "meta": {"template": "join_completion", "variation": "chained_joins", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "ea983351-e7f7-4c1d-aa27-a74524b55888", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"orders": {"schema": {"customer_id": "int64", "amount": "float64"}}, "customers": {"schema": {"customer_id": "int64", "name": "string"}}}}, "input": {"partial_code": "orders.filter(orders.amount > 100).join(customers,"}, "target": {"completed_code": "orders.filter(orders.amount > 100).join(customers, orders.customer_id == customers.customer_id)"}, "meta": {"template": "join_completion", "variation": "join_with_filter", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "7815c3f4-7c2e-46f6-9880-8f0765b48dca", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"orders": {"schema": {"order_id": "int64", "customer_id": "int64", "amount": "float64"}}, "customers": {"schema": {"customer_id": "int64", "name": "string"}}}}, "input": {"partial_code": "orders.join(customers, orders.customer_id == customers.customer_id).select('order_id', 'name',"}, "target": {"completed_code": "orders.join(customers, orders.customer_id == customers.customer_id).select('order_id', 'name', 'amount')"}, "meta": {"template": "join_completion", "variation": "join_with_select", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "a851e6fc-123e-4343-9f19-1aa735725793", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"employees": {"schema": {"employee_id": "int64", "manager_id": "int64", "name": "string"}}}}, "input": {"partial_code": "employees.join(employees.relabel({'employee_id': 'manager_id', 'name': 'manager_name'}),"}, "target": {"completed_code": "employees.join(employees.relabel({'employee_id': 'manager_id', 'name': 'manager_name'}), employees.manager_id == employees.manager_id)"}, "meta": {"template": "join_completion", "variation": "self_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "a141c231-991d-44c3-a031-bb04964bc420", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"customers": {"schema": {"customer_id": "int64", "name": "string"}}, "orders": {"schema": {"customer_id": "int64", "amount": "float64"}}}}, "input": {"partial_code": "customers.join(orders.group_by('customer_id').agg(total=orders.amount.sum()),"}, "target": {"completed_code": "customers.join(orders.group_by('customer_id').agg(total=orders.amount.sum()), customers.customer_id == orders.customer_id)"}, "meta": {"template": "join_completion", "variation": "join_with_aggregation", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "0d35145a-5160-4853-856c-f8c21bc9fa64", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"trades": {"schema": {"timestamp": "timestamp", "symbol": "string", "price": "float64"}}, "quotes": {"schema": {"timestamp": "timestamp", "symbol": "string", "bid": "float64"}}}}, "input": {"partial_code": "trades.asof_join(quotes, 'timestamp',"}, "target": {"completed_code": "trades.asof_join(quotes, 'timestamp', predicates=trades.symbol == quotes.symbol)"}, "meta": {"template": "join_completion", "variation": "asof_join", "difficulty": "medium", "features": ["join", "completion"]}}
{"id": "6044299c-dd51-46cb-aac6-8f651406b5eb", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"category": "string", "sales": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='category', order_by='sales')\ntable.mutate(rank="}, "target": {"completed_code": "window = ibis.window(group_by='category', order_by='sales')\ntable.mutate(rank=ibis.row_number().over(window))"}, "meta": {"template": "window_completion", "variation": "row_number_basic", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "d09eeedc-74ec-4ea1-a537-5cb2629a5780", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"date": "timestamp", "amount": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='date', rows=(None, 0))\ntable.mutate(running_total="}, "target": {"completed_code": "window = ibis.window(order_by='date', rows=(None, 0))\ntable.mutate(running_total=table.amount.sum().over(window))"}, "meta": {"template": "window_completion", "variation": "running_total", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "3a3b1b28-d7d6-47ef-b3e2-925ee614ff8b", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"date": "timestamp", "value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='date', rows=(6, 0))\ntable.mutate(ma_7="}, "target": {"completed_code": "window = ibis.window(order_by='date', rows=(6, 0))\ntable.mutate(ma_7=table.value.mean().over(window))"}, "meta": {"template": "window_completion", "variation": "moving_average", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "dc593ac7-f6f1-4aaf-a364-81ca60ea1fd2", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"date": "timestamp", "value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='date')\ntable.mutate(previous_value="}, "target": {"completed_code": "window = ibis.window(order_by='date')\ntable.mutate(previous_value=table.value.lag().over(window))"}, "meta": {"template": "window_completion", "variation": "lag_function", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "6800c5d8-7e7d-4c01-9763-f9e0c6f3ddac", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"date": "timestamp", "value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='date')\ntable.mutate(next_value="}, "target": {"completed_code": "window = ibis.window(order_by='date')\ntable.mutate(next_value=table.value.lead().over(window))"}, "meta": {"template": "window_completion", "variation": "lead_function", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "fff6c342-4f3a-4397-a85e-1a244754f27e", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"region": "string", "sales": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='region', order_by=ibis.desc('sales'))\ntable.mutate(rank="}, "target": {"completed_code": "window = ibis.window(group_by='region', order_by=ibis.desc('sales'))\ntable.mutate(rank=ibis.rank().over(window))"}, "meta": {"template": "window_completion", "variation": "rank_function", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "fc491b64-fcde-42c9-abe9-f99601f9ac58", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"score": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by=ibis.desc('score'))\ntable.mutate(rank="}, "target": {"completed_code": "window = ibis.window(order_by=ibis.desc('score'))\ntable.mutate(rank=ibis.dense_rank().over(window))"}, "meta": {"template": "window_completion", "variation": "dense_rank", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "787d7f6f-4050-461f-97db-fcfc619e9daf", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"test_score": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='test_score')\ntable.mutate(percentile="}, "target": {"completed_code": "window = ibis.window(order_by='test_score')\ntable.mutate(percentile=ibis.percent_rank().over(window) * 100)"}, "meta": {"template": "window_completion", "variation": "percent_rank", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "64e2507d-a03d-41f7-8c4f-aaee931a0899", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(order_by='value')\ntable.mutate(quartile="}, "target": {"completed_code": "window = ibis.window(order_by='value')\ntable.mutate(quartile=ibis.ntile(4).over(window))"}, "meta": {"template": "window_completion", "variation": "ntile_quartiles", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "c00d5536-1546-4408-9ea3-523db494c7ff", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"group": "string", "date": "timestamp", "value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='group', order_by='date')\ntable.mutate(first_value="}, "target": {"completed_code": "window = ibis.window(group_by='group', order_by='date')\ntable.mutate(first_value=table.value.first().over(window))"}, "meta": {"template": "window_completion", "variation": "first_value", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "2d35c3da-ab28-486d-8c4c-a9d3484a8370", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"group": "string", "date": "timestamp", "value": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='group', order_by='date')\ntable.mutate(last_value="}, "target": {"completed_code": "window = ibis.window(group_by='group', order_by='date')\ntable.mutate(last_value=table.value.last().over(window))"}, "meta": {"template": "window_completion", "variation": "last_value", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "19e0099c-9aa5-438a-bdcf-c540c312d9ba", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"customer_id": "int64", "purchase_date": "timestamp", "amount": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='customer_id', order_by='purchase_date', rows=(None, 0))\ntable.mutate(lifetime_value="}, "target": {"completed_code": "window = ibis.window(group_by='customer_id', order_by='purchase_date', rows=(None, 0))\ntable.mutate(lifetime_value=table.amount.sum().over(window))"}, "meta": {"template": "window_completion", "variation": "cumulative_sum", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "60b41ec5-3730-4c30-a5eb-70146cc8475b", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"category": "string", "sales": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='category')\ntable.mutate(category_total="}, "target": {"completed_code": "window = ibis.window(group_by='category')\ntable.mutate(category_total=table.sales.sum().over(window))"}, "meta": {"template": "window_completion", "variation": "window_aggregation_sum", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "d336020d-5176-4795-93aa-2c2e0394e236", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"region": "string"}}}}, "input": {"partial_code": "window = ibis.window(group_by='region')\ntable.mutate(region_count="}, "target": {"completed_code": "window = ibis.window(group_by='region')\ntable.mutate(region_count=ibis.count().over(window))"}, "meta": {"template": "window_completion", "variation": "window_aggregation_count", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "3f72fd52-3597-48b7-b925-51831b3ffa30", "task": "code_completion", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nComplete the partial Ibis expression provided by the user.\nOutput only the completed code, no explanations.", "context": {"tables": {"table": {"schema": {"product_id": "int64", "year": "int64", "sales": "float64"}}}}, "input": {"partial_code": "window = ibis.window(group_by='product_id', order_by='year')\ntable.mutate(previous_year_sales="}, "target": {"completed_code": "window = ibis.window(group_by='product_id', order_by='year')\ntable.mutate(previous_year_sales=table.sales.lag().over(window))"}, "meta": {"template": "window_completion", "variation": "year_over_year_comparison", "difficulty": "hard", "features": ["window", "completion", "analytics"]}}
{"id": "24278d06-7c2f-4f11-a455-18ff380e51cb", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_adult_users(table):\n    return table.filter(table.age >= 18)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get adult users from the table.\n\nArgs:\n    table: Ibis table containing user data with age column\n\nReturns:\n    Filtered table containing only users aged 18 and above\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "simple_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "350bf53f-d0c1-45dd-8c58-f7f69636c4c6", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_adult_users(table):\n    return table.filter(table.age >= 18)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get adult users from the table.\n\nParameters\n----------\ntable : ibis.Table\n    Ibis table containing user data with age column\n\nReturns\n-------\nibis.Table\n    Filtered table containing only users aged 18 and above\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "simple_filter_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "07b29d4f-3da0-41bc-8414-ae570143cde6", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_active_adults(table):\n    return table.filter((table.age >= 18) & table.is_active)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get active adult users from the table.\n\nFilters for users who are both 18 or older and have active status.\n\nArgs:\n    table: Ibis table with age (int) and is_active (bool) columns\n\nReturns:\n    Filtered table containing only active adult users\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "compound_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "0eeef814-6b9a-4412-bbdc-77226ed16277", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_user_info(table):\n    return table.select('user_id', 'name', 'email')\n", "style": "google"}, "target": {"docstring": "\"\"\"Get basic user information columns.\n\nArgs:\n    table: Ibis table containing user data\n\nReturns:\n    Table with only user_id, name, and email columns\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "select_columns_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "d5a1801f-8963-45ac-81a7-8c2b755e905d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_high_value_transactions(transactions, threshold=1000):\n    return transactions.filter(transactions.amount > threshold).select('transaction_id', 'amount', 'user_id')\n", "style": "google"}, "target": {"docstring": "\"\"\"Get high-value transactions above a threshold.\n\nArgs:\n    transactions: Ibis table containing transaction data\n    threshold: Minimum transaction amount (default: 1000)\n\nReturns:\n    Table with transaction_id, amount, and user_id for transactions\n    exceeding the threshold\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_and_select_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "6bc30e7b-d7ed-4eae-bc65-a7dfab6c125c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def remove_null_emails(users):\n    return users.filter(users.email.notnull())\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Remove users with null email addresses.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table containing only users with non-null email addresses\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_null_values_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "24486484-9c09-41a8-b941-08438e9cf666", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_users_by_status(table, statuses):\n    return table.filter(table.status.isin(statuses))\n", "style": "google"}, "target": {"docstring": "\"\"\"Get users with specific status values.\n\nArgs:\n    table: Ibis table containing user data with status column\n    statuses: List of status values to filter for\n\nReturns:\n    Table containing users whose status is in the provided list\n\nExample:\n    >>> get_users_by_status(users, ['active', 'pending'])\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_by_list_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "301616b0-1cfd-495d-8caa-86c9462b2582", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_recent_events(events, since_date):\n    return events.filter(events.created_at >= since_date)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get events created on or after a specific date.\n\nArgs:\n    events: Ibis table containing event data with created_at timestamp\n    since_date: Minimum date/timestamp for filtering\n\nReturns:\n    Table containing events from the specified date onwards\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "temporal_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "1ed1c52e-9275-45b5-a3fd-114d5e3bf03f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_users_by_name_pattern(users, pattern):\n    return users.filter(users.name.like(pattern))\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Find users whose names match a pattern.\n\nParameters\n----------\nusers : ibis.Table\n    User table with name column\npattern : str\n    SQL LIKE pattern (use % as wildcard)\n\nReturns\n-------\nibis.Table\n    Users whose names match the pattern\n\nExamples\n--------\n>>> find_users_by_name_pattern(users, 'John%')  # Names starting with John\n>>> find_users_by_name_pattern(users, '%smith%')  # Names containing smith\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "string_pattern_filter_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "180ae954-1685-404f-93d3-0008527679dc", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_premium_active_users(users, min_age=18, min_spend=500):\n    return users.filter(\n        (users.age >= min_age) &\n        users.is_active &\n        (users.total_spend >= min_spend)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Get premium active users based on multiple criteria.\n\nFilters for users who are:\n- At least the minimum age\n- Currently active\n- Have spent at least the minimum amount\n\nArgs:\n    users: Ibis table with age, is_active, and total_spend columns\n    min_age: Minimum age requirement (default: 18)\n    min_spend: Minimum total spending requirement (default: 500)\n\nReturns:\n    Table containing users meeting all premium criteria\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "complex_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "ffe4b60e-9fae-4543-8041-961cff399918", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_by_region(sales):\n    return sales.group_by('region').agg(total_sales=sales.amount.sum())\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate total sales for each region.\n\nArgs:\n    sales: Ibis table containing sales data with region and amount columns\n\nReturns:\n    Table with region and total_sales columns, one row per region\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "simple_groupby_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1467de62-3632-4769-a0dd-de494a28d9f5", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_summary(sales):\n    return sales.group_by('region').agg(\n        total=sales.amount.sum(),\n        average=sales.amount.mean(),\n        count=sales.count()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Generate comprehensive sales summary by region.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with region and amount columns\n\nReturns\n-------\nibis.Table\n    Summary table with columns:\n    - region: Geographic region\n    - total: Total sales amount\n    - average: Mean sales amount\n    - count: Number of transactions\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "multiple_aggregations_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "f839f808-db06-4e2d-9ef5-51f6787ecd74", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def count_events_by_type(events):\n    return events.group_by('event_type').agg(count=events.count())\n", "style": "google"}, "target": {"docstring": "\"\"\"Count events by type.\n\nArgs:\n    events: Ibis table with event_type column\n\nReturns:\n    Table showing count of events for each event type\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "count_by_category_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1a9eccc7-0ca4-47c3-bfae-3064b0c1166f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def high_value_transaction_stats(transactions):\n    return transactions.group_by('user_id').agg(\n        high_value_count=(transactions.amount > 1000).sum(),\n        high_value_total=(transactions.amount * (transactions.amount > 1000)).sum()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate high-value transaction statistics per user.\n\nComputes metrics for transactions exceeding $1000.\n\nArgs:\n    transactions: Transaction table with user_id and amount columns\n\nReturns:\n    Table with user_id, count of high-value transactions, and their total amount\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "conditional_aggregation_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "5a7e43a8-0608-4866-9a81-04c804df167d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_by_region_and_product(sales):\n    return sales.group_by(['region', 'product_id']).agg(\n        total_sales=sales.amount.sum(),\n        units_sold=sales.quantity.sum()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Aggregate sales by region and product.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with region, product_id, amount, and quantity columns\n\nReturns\n-------\nibis.Table\n    Grouped table with columns:\n    - region: Geographic region\n    - product_id: Product identifier\n    - total_sales: Sum of sale amounts\n    - units_sold: Total quantity sold\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "multiple_groupby_keys_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "f1a6a940-b0c1-4aa1-9ee9-0cccbb62c911", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def price_range_by_category(products):\n    return products.group_by('category').agg(\n        min_price=products.price.min(),\n        max_price=products.price.max(),\n        avg_price=products.price.mean()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate price range statistics by product category.\n\nArgs:\n    products: Product table with category and price columns\n\nReturns:\n    Table with min, max, and average prices for each category\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "min_max_aggregation_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1813359f-03b8-4ebe-be39-32e622fb05f9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_high_volume_customers(orders, min_orders=10):\n    result = orders.group_by('customer_id').agg(order_count=orders.count())\n    return result.filter(result.order_count >= min_orders)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get customers with high order volume.\n\nArgs:\n    orders: Order table with customer_id column\n    min_orders: Minimum number of orders required (default: 10)\n\nReturns:\n    Table with customer_id and order_count for customers meeting\n    the minimum order threshold\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "having_clause_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "cec386ac-8450-4b09-a85b-e73cf8c087ec", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def customer_lifetime_value(transactions):\n    return transactions.group_by('customer_id').agg(\n        total_spent=transactions.amount.sum(),\n        avg_transaction=transactions.amount.mean(),\n        transaction_count=transactions.count(),\n        first_purchase=transactions.purchase_date.min(),\n        last_purchase=transactions.purchase_date.max()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate customer lifetime value metrics.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with customer_id, amount, and purchase_date columns\n\nReturns\n-------\nibis.Table\n    Customer metrics including:\n    - customer_id: Customer identifier\n    - total_spent: Lifetime spending\n    - avg_transaction: Average transaction amount\n    - transaction_count: Total number of transactions\n    - first_purchase: Date of first purchase\n    - last_purchase: Date of most recent purchase\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "complex_aggregation_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "d56a6993-f8ef-4f3c-b90b-95b0f9e76e4a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def unique_visitors_by_page(visits):\n    return visits.group_by('page_url').agg(\n        unique_visitors=visits.user_id.nunique(),\n        total_visits=visits.count()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Count unique visitors and total visits per page.\n\nArgs:\n    visits: Visit log table with page_url and user_id columns\n\nReturns:\n    Table showing unique visitor count and total visit count for each page\n\nExample:\n    >>> unique_visitors_by_page(visit_logs)\n    # Shows pages with their unique and total visitor counts\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "distinct_count_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "50bc3f35-c1e4-4136-b831-349e60a7acb8", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def analyze_price_variability(products):\n    return products.group_by('category').agg(\n        avg_price=products.price.mean(),\n        std_price=products.price.std(),\n        price_variance=products.price.var()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Analyze price variability by product category.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with category and price columns\n\nReturns\n-------\nibis.Table\n    Statistical summary with columns:\n    - category: Product category\n    - avg_price: Mean price\n    - std_price: Standard deviation of prices\n    - price_variance: Variance of prices\n\nNotes\n-----\nUseful for identifying categories with inconsistent pricing.\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "stddev_aggregation_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "46796a6c-2354-4c5c-b244-e93e9254c84c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def enrich_orders_with_customers(orders, customers):\n    return orders.join(customers, orders.customer_id == customers.customer_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Enrich order data with customer information.\n\nPerforms an inner join to add customer details to orders.\n\nArgs:\n    orders: Order table with customer_id column\n    customers: Customer table with customer_id and customer details\n\nReturns:\n    Combined table with all columns from both orders and customers\n    for matching customer_ids\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "inner_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "b1366cba-bb40-46d3-9b56-925a03257e44", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_users_with_optional_profiles(users, profiles):\n    return users.left_join(profiles, users.user_id == profiles.user_id)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get all users with their profile data if available.\n\nPerforms a left join to include all users, with profile data\nwhere it exists.\n\nParameters\n----------\nusers : ibis.Table\n    User table with user_id column\nprofiles : ibis.Table\n    Profile table with user_id and profile information\n\nReturns\n-------\nibis.Table\n    Table with all users; profile columns will be null for users\n    without profiles\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "left_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "a5780600-b74f-4739-8416-2deee6309515", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_order_summary(orders, customers, products):\n    return (orders\n        .join(customers, orders.customer_id == customers.customer_id)\n        .join(products, orders.product_id == products.product_id))\n", "style": "google"}, "target": {"docstring": "\"\"\"Create comprehensive order summary with customer and product details.\n\nJoins orders with customers and products to create a denormalized view.\n\nArgs:\n    orders: Order table with customer_id and product_id\n    customers: Customer table with customer details\n    products: Product table with product details\n\nReturns:\n    Denormalized table combining order, customer, and product information\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "multiple_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "ee3ba951-3997-4227-8c0d-71d3633c02fd", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_employee_managers(employees):\n    managers = employees.relabel({'employee_id': 'manager_id', 'name': 'manager_name'})\n    return employees.join(managers, employees.manager_id == managers.manager_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Find each employee with their manager's information.\n\nPerforms a self-join to associate employees with their managers.\n\nArgs:\n    employees: Employee table with employee_id, manager_id, and name columns\n\nReturns:\n    Table with employee information plus their manager's name\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "self_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "4257a8af-aaf0-401b-96ae-cfb24e2bc0d7", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def compare_sales_targets(actual_sales, sales_targets):\n    return actual_sales.outer_join(\n        sales_targets,\n        actual_sales.region == sales_targets.region\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Compare actual sales with targets for all regions.\n\nUses outer join to include regions with targets but no sales,\nand regions with sales but no targets.\n\nParameters\n----------\nactual_sales : ibis.Table\n    Table with region and actual sales data\nsales_targets : ibis.Table\n    Table with region and target sales data\n\nReturns\n-------\nibis.Table\n    Table showing both actual and target data for all regions;\n    null values indicate missing data in either table\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "outer_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "26adbe19-1a0b-4cc2-9951-9efa81b8bbaa", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_recent_high_value_orders(orders, customers, since_date, min_amount):\n    return (orders\n        .filter((orders.order_date >= since_date) & (orders.amount >= min_amount))\n        .join(customers, orders.customer_id == customers.customer_id))\n", "style": "google"}, "target": {"docstring": "\"\"\"Get recent high-value orders with customer details.\n\nFilters orders by date and amount before joining with customer data.\n\nArgs:\n    orders: Order table with order_date, amount, and customer_id\n    customers: Customer table with customer details\n    since_date: Earliest order date to include\n    min_amount: Minimum order amount to include\n\nReturns:\n    High-value recent orders enriched with customer information\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "join_with_filter_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "d5d49404-55f1-4f18-9fe9-59342e2097b3", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def join_regional_sales(sales_a, sales_b):\n    return sales_a.join(\n        sales_b,\n        (sales_a.region == sales_b.region) & (sales_a.quarter == sales_b.quarter)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Join sales data from two sources by region and quarter.\n\nParameters\n----------\nsales_a : ibis.Table\n    First sales table with region and quarter columns\nsales_b : ibis.Table\n    Second sales table with region and quarter columns\n\nReturns\n-------\nibis.Table\n    Combined sales data matched on both region and quarter\n\nNotes\n-----\nOnly includes rows where both region and quarter match between tables.\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "multiple_join_keys_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "b1344c41-cd21-4c7e-86ec-9b334cc23f9b", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def customer_order_summary(customers, orders):\n    order_stats = orders.group_by('customer_id').agg(\n        total_orders=orders.count(),\n        total_spent=orders.amount.sum()\n    )\n    return customers.join(order_stats, customers.customer_id == order_stats.customer_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Create customer summary with order statistics.\n\nAggregates order data and joins with customer information.\n\nArgs:\n    customers: Customer table with customer_id and customer details\n    orders: Order table with customer_id and amount columns\n\nReturns:\n    Table with customer details plus total_orders and total_spent\n    for each customer\n\nExample:\n    >>> summary = customer_order_summary(customers, orders)\n    >>> summary[['customer_id', 'name', 'total_orders', 'total_spent']]\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "join_with_aggregation_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "65b89e1e-6fde-4f40-85af-e7eeb0b4397f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_customers_without_orders(customers, orders):\n    return customers.left_join(\n        orders, customers.customer_id == orders.customer_id\n    ).filter(orders.order_id.isnull())\n", "style": "google"}, "target": {"docstring": "\"\"\"Find customers who have never placed an order.\n\nUses left join followed by null filtering to identify customers\nwith no matching orders.\n\nArgs:\n    customers: Customer table with customer_id\n    orders: Order table with customer_id and order_id\n\nReturns:\n    Table of customers with no orders (anti-join result)\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "anti_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "c1f9dc24-e13d-4da5-ae22-c10f46d27eab", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_active_products(products, recent_orders):\n    return products.semi_join(recent_orders, products.product_id == recent_orders.product_id)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get products that have been ordered recently.\n\nReturns products that appear in recent orders without duplicating\nrows or adding order columns.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with product_id and product details\nrecent_orders : ibis.Table\n    Recent order table with product_id column\n\nReturns\n-------\nibis.Table\n    Products that exist in recent_orders, with product columns only\n\nNotes\n-----\nSemi-join returns only products table columns, unlike inner join\nwhich would include order columns and create duplicates.\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "semi_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "ec87054f-8e3f-4b7d-9c9c-d1b79beb67dd", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def rank_sales_by_region(sales):\n    window = ibis.window(group_by='region', order_by=ibis.desc('amount'))\n    return sales.mutate(rank=ibis.row_number().over(window))\n", "style": "google"}, "target": {"docstring": "\"\"\"Rank sales within each region by amount.\n\nAssigns a sequential rank to each sale within its region,\nordered by amount (highest first).\n\nArgs:\n    sales: Sales table with region and amount columns\n\nReturns:\n    Sales table with added rank column (1 = highest amount in region)\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "row_number_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "76135dc2-86cd-48ab-b0ce-fe1dc7431ab1", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_running_total(transactions):\n    window = ibis.window(order_by='transaction_date', rows=(None, 0))\n    return transactions.mutate(running_total=transactions.amount.sum().over(window))\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate running total of transaction amounts.\n\nComputes cumulative sum of amounts ordered by transaction date.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with transaction_date and amount columns\n\nReturns\n-------\nibis.Table\n    Original table with running_total column showing cumulative sum\n    up to and including each row\n\nNotes\n-----\nUses rows between unbounded preceding and current row.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "running_total_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "a4f7126d-91c7-4136-9e1a-963db6a3381d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_moving_average(daily_sales, window_days=7):\n    window = ibis.window(order_by='sale_date', rows=(window_days-1, 0))\n    return daily_sales.mutate(moving_avg=daily_sales.amount.mean().over(window))\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate moving average of sales over a window.\n\nArgs:\n    daily_sales: Table with sale_date and amount columns\n    window_days: Number of days to include in average (default: 7)\n\nReturns:\n    Table with moving_avg column showing average of current and\n    previous (window_days - 1) days\n\nExample:\n    >>> calculate_moving_average(sales, window_days=30)  # 30-day moving average\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "moving_average_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "5707d504-2e21-4f2a-91e3-efe46dd3b1b9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def compare_with_previous(metrics):\n    window = ibis.window(order_by='metric_date')\n    return metrics.mutate(\n        previous_value=metrics.value.lag().over(window),\n        next_value=metrics.value.lead().over(window),\n        change_from_prev=metrics.value - metrics.value.lag().over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Add previous and next values for comparison.\n\nAdds columns showing the value from the previous row, next row,\nand change from previous.\n\nArgs:\n    metrics: Time-series table with metric_date and value columns\n\nReturns:\n    Table with added columns:\n    - previous_value: Value from previous row\n    - next_value: Value from next row\n    - change_from_prev: Difference from previous value\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "lag_lead_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "0150458e-2bc6-4f8e-88c3-8b2b93ca6a5e", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def top_products_per_category(products):\n    window = ibis.window(group_by='category', order_by=ibis.desc('sales'))\n    ranked = products.mutate(rank=ibis.row_number().over(window))\n    return ranked.filter(ranked.rank <= 5)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get top 5 products by sales in each category.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with category and sales columns\n\nReturns\n-------\nibis.Table\n    Top 5 products per category, ranked by sales (highest first)\n\nExamples\n--------\n>>> top_products_per_category(product_sales)\n# Returns rank 1-5 products for each category\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "partition_rank_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "dc353599-fc90-4cc4-a96c-70233e13e23a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_percentile_ranks(students):\n    window = ibis.window(order_by=ibis.desc('test_score'))\n    return students.mutate(\n        percentile=ibis.percent_rank().over(window) * 100\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate percentile rank for student test scores.\n\nArgs:\n    students: Table with test_score column\n\nReturns:\n    Table with percentile column (0-100) showing each student's\n    relative position (100 = highest score)\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "percent_rank_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "335f8603-202c-49d8-84f5-77d4e7c5e19d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_period_bounds(daily_metrics):\n    window = ibis.window(group_by='month', order_by='date')\n    return daily_metrics.mutate(\n        month_start_value=daily_metrics.value.first().over(window),\n        month_end_value=daily_metrics.value.last().over(window)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Add first and last values for each month.\n\nParameters\n----------\ndaily_metrics : ibis.Table\n    Daily metrics with month, date, and value columns\n\nReturns\n-------\nibis.Table\n    Table with added columns:\n    - month_start_value: First value in the month\n    - month_end_value: Last value in the month\n\nNotes\n-----\nUseful for calculating monthly changes or identifying trends.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "first_last_value_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "455d0611-d226-4321-834f-ca2a53217acf", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def rank_with_ties(competition_results):\n    window = ibis.window(order_by=ibis.desc('score'))\n    return competition_results.mutate(\n        rank=ibis.dense_rank().over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Rank competition results handling ties appropriately.\n\nUses dense_rank to ensure tied scores get the same rank, with\nno gaps in rank values.\n\nArgs:\n    competition_results: Table with score column\n\nReturns:\n    Table with rank column (ties receive same rank, ranks are consecutive)\n\nExample:\n    Scores [100, 95, 95, 90] get ranks [1, 2, 2, 3] (not [1, 2, 2, 4])\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "dense_rank_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "4b7258c5-616b-4fe1-aaf7-5b54fa64a155", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_quartiles(customer_values):\n    window = ibis.window(order_by='lifetime_value')\n    return customer_values.mutate(\n        quartile=ibis.ntile(4).over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Divide customers into quartiles by lifetime value.\n\nArgs:\n    customer_values: Table with lifetime_value column\n\nReturns:\n    Table with quartile column (1-4) indicating which quartile\n    each customer belongs to\n\nNotes:\n    Quartile 1 = lowest 25%, Quartile 4 = highest 25%\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "ntile_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "70f8b579-5d47-4ca0-a073-150609e081ac", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_analytics(sales):\n    category_window = ibis.window(group_by='category', order_by=ibis.desc('amount'))\n    time_window = ibis.window(order_by='sale_date', rows=(6, 0))\n    return sales.mutate(\n        category_rank=ibis.row_number().over(category_window),\n        weekly_avg=sales.amount.mean().over(time_window),\n        pct_of_category=sales.amount / sales.amount.sum().over(category_window) * 100\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Generate comprehensive sales analytics with multiple window functions.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with category, amount, and sale_date columns\n\nReturns\n-------\nibis.Table\n    Sales table enriched with:\n    - category_rank: Rank within category by amount\n    - weekly_avg: 7-day moving average\n    - pct_of_category: Percentage of total category sales\n\nNotes\n-----\nDemonstrates using multiple window specifications in a single operation.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "complex_window_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "c1e4dfb5-211b-4ecb-8280-7ba0390d6697", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_full_name(users):\n    return users.mutate(full_name=users.first_name + ' ' + users.last_name)\n", "style": "google"}, "target": {"docstring": "\"\"\"Create full name by concatenating first and last names.\n\nArgs:\n    users: User table with first_name and last_name columns\n\nReturns:\n    Table with added full_name column (first_name + space + last_name)\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_concatenation_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "0d9f772b-f25f-447d-88d0-296e39e9a974", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def normalize_email_addresses(users):\n    return users.mutate(\n        email_normalized=users.email.lower().strip()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Normalize email addresses to lowercase and remove whitespace.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table with email_normalized column containing trimmed,\n    lowercase email addresses\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_case_conversion_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "7c640342-798d-48f2-832e-c465735289c9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_area_code(phone_numbers):\n    return phone_numbers.mutate(\n        area_code=phone_numbers.phone.substr(0, 3)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract area code from phone numbers.\n\nExtracts first 3 characters as area code.\n\nArgs:\n    phone_numbers: Table with phone column\n\nReturns:\n    Table with area_code column containing first 3 digits\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "substring_extraction_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "904cdf7f-1f43-4d42-aacf-78c57ca0ea0a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_gmail_users(users):\n    return users.filter(users.email.like('%@gmail.com'))\n", "style": "google"}, "target": {"docstring": "\"\"\"Filter for users with Gmail addresses.\n\nArgs:\n    users: User table with email column\n\nReturns:\n    Table containing only users with @gmail.com email addresses\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_pattern_matching_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "f7f726aa-a09f-4b97-ab9d-84f3feced9e5", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_domain_from_email(users):\n    return users.mutate(\n        domain=users.email.re_extract(r'@(.+)$', 1)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Extract domain name from email addresses.\n\nUses regex to extract text after @ symbol.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table with domain column containing email domain\n    (e.g., 'gmail.com' from 'user@gmail.com')\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "regex_extraction_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "641c3ad7-1046-4218-9d8a-d07be190f832", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_date_parts(events):\n    return events.mutate(\n        year=events.event_date.year(),\n        month=events.event_date.month(),\n        day=events.event_date.day()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract year, month, and day from event dates.\n\nArgs:\n    events: Event table with event_date timestamp column\n\nReturns:\n    Table with added year, month, and day columns as integers\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_extraction_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "b03db1e2-44fa-4e4e-b937-5d427c727692", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def add_expiration_date(subscriptions, days=30):\n    return subscriptions.mutate(\n        expiration_date=subscriptions.start_date + ibis.interval(days=days)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate subscription expiration dates.\n\nAdds specified number of days to start date.\n\nParameters\n----------\nsubscriptions : ibis.Table\n    Subscription table with start_date column\ndays : int, optional\n    Number of days until expiration (default: 30)\n\nReturns\n-------\nibis.Table\n    Table with expiration_date column\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_arithmetic_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "b1ea28fe-8f99-479b-8d28-7db0f02a253c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_customer_age(customers):\n    return customers.mutate(\n        days_since_signup=(ibis.now() - customers.signup_date).to_unit('D')\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate how many days since each customer signed up.\n\nArgs:\n    customers: Customer table with signup_date column\n\nReturns:\n    Table with days_since_signup column showing days elapsed\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_difference_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "28b30aca-f7a8-4a3b-9238-6934ed50ee4e", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def group_by_month(transactions):\n    return transactions.mutate(\n        month=transactions.transaction_date.truncate('M')\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Truncate transaction dates to month for grouping.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with transaction_date column\n\nReturns\n-------\nibis.Table\n    Table with month column showing first day of each month\n\nNotes\n-----\nUseful for monthly aggregations and time-series analysis.\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_truncation_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "976129e2-ab78-48af-a6d4-1fb4a222f3fa", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def filter_by_comment_length(posts, min_length=10):\n    return posts.filter(posts.comment.length() >= min_length)\n", "style": "google"}, "target": {"docstring": "\"\"\"Filter posts with comments above minimum length.\n\nArgs:\n    posts: Post table with comment column\n    min_length: Minimum comment length in characters (default: 10)\n\nReturns:\n    Posts with comments of at least min_length characters\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_length_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "373b328c-2e78-47c0-a598-0fa178051e76", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def clean_phone_numbers(contacts):\n    return contacts.mutate(\n        phone_cleaned=contacts.phone.replace('-', '').replace('(', '').replace(')', '')\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Remove formatting characters from phone numbers.\n\nRemoves dashes, parentheses, and other formatting.\n\nParameters\n----------\ncontacts : ibis.Table\n    Contact table with phone column\n\nReturns\n-------\nibis.Table\n    Table with phone_cleaned column containing only digits\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_replacement_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "324e282b-fe80-4531-ad30-4fe56a008ded", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def format_dates_for_display(events):\n    return events.mutate(\n        date_display=events.event_date.strftime('%Y-%m-%d %H:%M')\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Format event dates for display.\n\nArgs:\n    events: Event table with event_date timestamp column\n\nReturns:\n    Table with date_display column in 'YYYY-MM-DD HH:MM' format\n\nExample:\n    >>> format_dates_for_display(events)\n    # date_display: '2024-03-15 14:30'\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_formatting_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "611ec678-c9aa-4e0f-8705-8a26ac730e1c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_first_word(products):\n    return products.mutate(\n        brand=products.product_name.split(' ')[0]\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract first word from product names as brand.\n\nArgs:\n    products: Product table with product_name column\n\nReturns:\n    Table with brand column containing first word of product_name\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_splitting_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "fb99cbf6-ad11-4862-9585-f16934f36945", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def add_weekday_info(sales):\n    return sales.mutate(\n        day_of_week=sales.sale_date.day_of_week.full_name(),\n        is_weekend=(sales.sale_date.day_of_week.index() >= 5)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Add weekday name and weekend indicator.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with sale_date column\n\nReturns\n-------\nibis.Table\n    Table with added columns:\n    - day_of_week: Name of day (Monday, Tuesday, etc.)\n    - is_weekend: Boolean indicating if sale was on weekend\n\nNotes\n-----\nWeekend is defined as Saturday (5) or Sunday (6).\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "weekday_extraction_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "5e523bc1-87aa-486c-9752-2958a8f48f83", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"broken_code": "table.filter(table.age > '18')", "error": "TypeError: '>' not supported between 'int64' and 'str'", "context_info": "age column is int64 type"}, "target": {"fixed_code": "table.filter(table.age > 18)", "explanation": "Removed quotes from 18 to compare as integer instead of string"}, "meta": {"template": "type_errors", "variation": "string_to_int_comparison", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "8e0fd37c-812d-488a-9577-8093ba888ca2", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"category": "string", "name": "string", "amount": "float64"}}}}, "input": {"broken_code": "table.group_by('category').agg(total=table.name.sum())", "error": "AttributeError: 'StringColumn' object has no attribute 'sum'", "context_info": "Cannot sum string columns"}, "target": {"fixed_code": "table.group_by('category').agg(count=table.name.count())", "explanation": "Changed sum() to count() since name is a string column"}, "meta": {"template": "type_errors", "variation": "wrong_aggregation_type", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "c391e9ab-e176-46dd-aaf9-e9251bd8775d", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"is_active": "boolean", "age": "int64"}}}}, "input": {"broken_code": "table.filter(table.is_active && table.age > 18)", "error": "SyntaxError: invalid syntax", "context_info": "Python uses & for boolean AND, not &&"}, "target": {"fixed_code": "table.filter(table.is_active & (table.age > 18))", "explanation": "Changed && to & (Python's bitwise AND for boolean operations) and added parentheses"}, "meta": {"template": "type_errors", "variation": "boolean_operator_typo", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "141203dc-aaa7-4941-9b63-f88a63a84d37", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"status": "string", "user_id": "int64"}}}}, "input": {"broken_code": "table.filter(table.status = 'active')", "error": "SyntaxError: invalid syntax", "context_info": "Use == for comparison, not ="}, "target": {"fixed_code": "table.filter(table.status == 'active')", "explanation": "Changed = to == for equality comparison"}, "meta": {"template": "type_errors", "variation": "equality_vs_assignment", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "93b6aac2-75ad-4064-adc2-c824a128cd0a", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"amount": "float64", "is_active": "boolean"}}}}, "input": {"broken_code": "table.filter(table.amount > 100 & table.is_active)", "error": "TypeError: unsupported operand type(s) for &", "context_info": "Need parentheses for operator precedence"}, "target": {"fixed_code": "table.filter((table.amount > 100) & table.is_active)", "explanation": "Added parentheses around comparison to fix operator precedence"}, "meta": {"template": "type_errors", "variation": "missing_parentheses", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "436cf358-4c14-4173-b542-12f0980ea9ba", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_type": "string"}}}}, "input": {"broken_code": "events.filter(table.user_id == 1)", "error": "NameError: name 'table' is not defined", "context_info": "Should use events, not table"}, "target": {"fixed_code": "events.filter(events.user_id == 1)", "explanation": "Changed table to events to match the table variable name"}, "meta": {"template": "type_errors", "variation": "wrong_column_reference", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "271bcbdb-769c-487c-b55c-ba4e3cf28960", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"email": "string", "user_id": "int64"}}}}, "input": {"broken_code": "table.filter(table.email == None)", "error": "TypeError: Cannot compare column with None directly", "context_info": "Use .isnull() or .notnull() for null checks"}, "target": {"fixed_code": "table.filter(table.email.isnull())", "explanation": "Changed == None to .isnull() for proper null comparison"}, "meta": {"template": "type_errors", "variation": "null_comparison", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "cb904597-8e32-4e9f-9945-6884c21da8b7", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"created_at": "timestamp", "user_id": "int64"}}}}, "input": {"broken_code": "table.filter(table.created_at > 2024-01-01)", "error": "SyntaxError: invalid syntax", "context_info": "Timestamp literals need quotes"}, "target": {"fixed_code": "table.filter(table.created_at > '2024-01-01')", "explanation": "Added quotes around date string for proper timestamp comparison"}, "meta": {"template": "type_errors", "variation": "timestamp_string_comparison", "difficulty": "easy", "features": ["type_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "3c4aae34-72b8-41dd-a1c0-efee95fa9aad", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"broken_code": "table.filter(table.age > 18.select('name', 'age')", "error": "SyntaxError: invalid syntax", "context_info": "Missing closing parenthesis"}, "target": {"fixed_code": "table.filter(table.age > 18).select('name', 'age')", "explanation": "Added missing closing parenthesis after filter condition"}, "meta": {"template": "syntax_errors", "variation": "missing_parenthesis", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "4155df1e-55d2-4f43-b489-857cf797cc68", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"broken_code": "table.group_by('category')['amount'].sum()", "error": "TypeError: 'GroupBy' object is not subscriptable", "context_info": "Cannot use brackets on group_by result"}, "target": {"fixed_code": "table.group_by('category').agg(total=table.amount.sum())", "explanation": "Changed to proper agg() method instead of bracket notation"}, "meta": {"template": "syntax_errors", "variation": "wrong_method_chaining", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "1d085b63-e327-42a4-b279-164972668d8c", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"status": "string"}}}}, "input": {"broken_code": "table.filter(table.status == active)", "error": "NameError: name 'active' is not defined", "context_info": "String literal needs quotes"}, "target": {"fixed_code": "table.filter(table.status == 'active')", "explanation": "Added quotes around 'active' to make it a string literal"}, "meta": {"template": "syntax_errors", "variation": "incorrect_string_quotes", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "412ab4bd-bdb7-47e6-b08e-f4cc505d8cbf", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"broken_code": "table.group_by('category').agg(total=amount.sum())", "error": "NameError: name 'amount' is not defined", "context_info": "Need to reference column through table"}, "target": {"fixed_code": "table.group_by('category').agg(total=table.amount.sum())", "explanation": "Added table. prefix to amount column reference"}, "meta": {"template": "syntax_errors", "variation": "missing_table_reference", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "7a3aa1fb-4ff5-4347-9e45-09060b09d7e5", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"age": "int64", "is_active": "boolean"}}}}, "input": {"broken_code": "table.filter(table.age > 18 & table.is_active)", "error": "TypeError: unsupported operand type(s) for &", "context_info": "Need parentheses for correct operator precedence"}, "target": {"fixed_code": "table.filter((table.age > 18) & table.is_active)", "explanation": "Added parentheses around age comparison for correct precedence"}, "meta": {"template": "syntax_errors", "variation": "wrong_operator_precedence", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "b4b9e4b2-ba76-4487-834b-efbeef7541d4", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"broken_code": "table.groupe_by('category').agg(total=table.amount.sum())", "error": "AttributeError: 'Table' object has no attribute 'groupe_by'", "context_info": "Typo in method name"}, "target": {"fixed_code": "table.group_by('category').agg(total=table.amount.sum())", "explanation": "Fixed typo: 'groupe_by' \u2192 'group_by'"}, "meta": {"template": "syntax_errors", "variation": "typo_in_method_name", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "4af51500-b359-45a5-b457-f8b5d90cc7f3", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"broken_code": "table.group_by('category').sum('amount')", "error": "TypeError: sum() takes 0 positional arguments but 1 was given", "context_info": "Need to use agg() method"}, "target": {"fixed_code": "table.group_by('category').agg(total=table.amount.sum())", "explanation": "Changed to proper agg() syntax instead of directly calling sum()"}, "meta": {"template": "syntax_errors", "variation": "wrong_aggregation_syntax", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "e80e34c4-ad6c-4d73-af86-041b73b06fa8", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"name": "string", "age": "int64", "email": "string"}}}}, "input": {"broken_code": "table.select('name' 'age', 'email')", "error": "SyntaxError: invalid syntax", "context_info": "Missing comma between arguments"}, "target": {"fixed_code": "table.select('name', 'age', 'email')", "explanation": "Added missing comma between 'name' and 'age'"}, "meta": {"template": "syntax_errors", "variation": "missing_comma_in_select", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "295f8111-9ba2-4a23-95a3-346278bf0d12", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"age": "int64"}}}}, "input": {"broken_code": "table.filter[table.age > 18]", "error": "TypeError: 'method' object is not subscriptable", "context_info": "filter is a method, use parentheses not brackets"}, "target": {"fixed_code": "table.filter(table.age > 18)", "explanation": "Changed brackets to parentheses for method call"}, "meta": {"template": "syntax_errors", "variation": "bracket_vs_parenthesis", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "d5628d5e-9d83-4944-b7b9-5959c5c4ea00", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"orders": {"schema": {"customer_id": "int64"}}, "customers": {"schema": {"customer_id": "int64"}}}}, "input": {"broken_code": "orders.join(customers, 'customer_id')", "error": "TypeError: join() argument must be a boolean expression", "context_info": "Join condition must be a comparison expression"}, "target": {"fixed_code": "orders.join(customers, orders.customer_id == customers.customer_id)", "explanation": "Changed to proper join condition with comparison operator"}, "meta": {"template": "syntax_errors", "variation": "wrong_join_syntax", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "7566bc56-6a1d-49ad-b321-0aa13e6c4004", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"broken_code": "result = table.filter(table.age > 18)\n  .select('name', 'age')", "error": "IndentationError: unexpected indent", "context_info": "Method chaining should be aligned"}, "target": {"fixed_code": "result = table.filter(table.age > 18).select('name', 'age')", "explanation": "Put method chain on same line or use proper line continuation"}, "meta": {"template": "syntax_errors", "variation": "indentation_error", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "32dd6a51-a9d3-4223-9db4-bead2ed49b89", "task": "error_resolution", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nFix the compilation or type error in the provided Ibis code.\nOutput the fixed code and a brief explanation.", "context": {"tables": {"table": {"schema": {"email": "string"}}}}, "input": {"broken_code": "table.filter(not table.email.isnull())", "error": "TypeError: bad operand type for unary ~", "context_info": "Use notnull() instead of not isnull()"}, "target": {"fixed_code": "table.filter(table.email.notnull())", "explanation": "Changed to notnull() method instead of negating isnull()"}, "meta": {"template": "syntax_errors", "variation": "double_negation", "difficulty": "easy", "features": ["syntax_error", "debugging", "error_fix"], "error_type": "unknown"}}
{"id": "9671bb1f-87ed-4a11-9937-adf3d1e19d3c", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"ibis": "table.filter(table.age > 18)", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE age > 18\n"}, "meta": {"template": "filter_to_sql", "variation": "simple_numeric_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "87a7f886-fb8f-4977-b841-ecb6f4e5db5e", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"age": "int64", "is_active": "boolean"}}}}, "input": {"ibis": "table.filter((table.age > 18) & (table.is_active == True))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE (age > 18) AND (is_active = TRUE)\n"}, "meta": {"template": "filter_to_sql", "variation": "compound_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "82c945c6-2d43-4ea1-9345-244e94c1206f", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"name": "string", "age": "int64"}}}}, "input": {"ibis": "table.filter(table.name == 'Alice')", "dialect": "postgres"}, "target": {"sql": "SELECT *\nFROM table\nWHERE name = 'Alice'\n"}, "meta": {"template": "filter_to_sql", "variation": "string_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "f98edba7-daee-4940-ab19-351f6645db8f", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"status": "string"}}}}, "input": {"ibis": "table.filter((table.status == 'active') | (table.status == 'pending'))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE (status = 'active') OR (status = 'pending')\n"}, "meta": {"template": "filter_to_sql", "variation": "or_condition", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "bc11e2de-0477-4872-be32-4eadc2ea115b", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string"}}}}, "input": {"ibis": "table.filter(table.category.isin(['A', 'B', 'C']))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE category IN ('A', 'B', 'C')\n"}, "meta": {"template": "filter_to_sql", "variation": "isin_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "2a4a64a0-e161-4209-b06d-1c42b47e7d17", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"email": "string"}}}}, "input": {"ibis": "table.filter(table.email.notnull())", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE email IS NOT NULL\n"}, "meta": {"template": "filter_to_sql", "variation": "null_check", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "abebdc66-558d-4632-8572-cab29473cfbc", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"user_id": "int64", "amount": "float64", "timestamp": "timestamp"}}}}, "input": {"ibis": "table.filter(table.amount > 100).select('user_id', 'amount')", "dialect": "duckdb"}, "target": {"sql": "SELECT user_id, amount\nFROM table\nWHERE amount > 100\n"}, "meta": {"template": "filter_to_sql", "variation": "filter_with_select", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "3a2e0159-f4e7-4a8e-a7fe-bd9dabca5dab", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(total=table.amount.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT category, SUM(amount) AS total\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "simple_groupby_sum", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "b66adbd0-4e64-478a-b326-4123c90ff60f", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"region": "string", "sales": "float64"}}}}, "input": {"ibis": "table.group_by('region').agg(total_sales=table.sales.sum(), avg_sales=table.sales.mean(), count=table.count())", "dialect": "postgres"}, "target": {"sql": "SELECT region, SUM(sales) AS total_sales, AVG(sales) AS avg_sales, COUNT(*) AS count\nFROM table\nGROUP BY region\n"}, "meta": {"template": "aggregation_to_sql", "variation": "multiple_aggregations", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9af46fbe-5648-4c41-b216-eeb9833530c3", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"page": "string", "user_id": "int64"}}}}, "input": {"ibis": "table.group_by('page').agg(unique_visitors=table.user_id.nunique())", "dialect": "duckdb"}, "target": {"sql": "SELECT page, COUNT(DISTINCT user_id) AS unique_visitors\nFROM table\nGROUP BY page\n"}, "meta": {"template": "aggregation_to_sql", "variation": "count_distinct", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "2a53d956-31a3-42c9-8d80-ffdb1311268a", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"region": "string", "category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by(['region', 'category']).agg(total=table.amount.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT region, category, SUM(amount) AS total\nFROM table\nGROUP BY region, category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "multiple_groupby_keys", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9acd9875-42b1-4832-94ac-979b41a6203c", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"customer_id": "int64"}}}}, "input": {"ibis": "result = table.group_by('customer_id').agg(order_count=table.count())\nresult.filter(result.order_count >= 10)", "dialect": "postgres"}, "target": {"sql": "SELECT customer_id, COUNT(*) AS order_count\nFROM table\nGROUP BY customer_id\nHAVING COUNT(*) >= 10\n"}, "meta": {"template": "aggregation_to_sql", "variation": "having_clause", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "a4adf0e1-8a41-4cb7-9ac2-749fa094e067", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"product": "string", "price": "float64"}}}}, "input": {"ibis": "table.group_by('product').agg(min_price=table.price.min(), max_price=table.price.max())", "dialect": "duckdb"}, "target": {"sql": "SELECT product, MIN(price) AS min_price, MAX(price) AS max_price\nFROM table\nGROUP BY product\n"}, "meta": {"template": "aggregation_to_sql", "variation": "min_max_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9bd25956-4a35-43c8-af8f-bd769814d3aa", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(high_value_count=(table.amount > 100).sum())", "dialect": "postgres"}, "target": {"sql": "SELECT category, SUM(CASE WHEN amount > 100 THEN 1 ELSE 0 END) AS high_value_count\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "conditional_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "6d8fd16a-b2c4-4a89-8dd0-1df6832ef61a", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "price": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(avg_price=table.price.mean(), std_price=table.price.std())", "dialect": "postgres"}, "target": {"sql": "SELECT category, AVG(price) AS avg_price, STDDEV(price) AS std_price\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "std_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "0eb4cc04-07c2-4aba-8d44-828a23c5793a", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"year": "int64", "region": "string", "sales": "float64"}}}}, "input": {"ibis": "table.filter(table.year == 2024).group_by('region').agg(total=table.sales.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT region, SUM(sales) AS total\nFROM table\nWHERE year = 2024\nGROUP BY region\n"}, "meta": {"template": "aggregation_to_sql", "variation": "filter_before_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "fd62b0a8-b80b-4d4c-8fc3-637965ffb657", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "sales": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(total=table.sales.sum()).order_by(ibis.desc('total'))", "dialect": "postgres"}, "target": {"sql": "SELECT category, SUM(sales) AS total\nFROM table\nGROUP BY category\nORDER BY total DESC\n"}, "meta": {"template": "aggregation_to_sql", "variation": "aggregation_with_order", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "d2e63d89-7af0-407c-ae37-5d14418ea751", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I filter rows in Ibis where age is greater than 18?"}, "target": {"answer": "Use the filter() method with a comparison expression.", "code_example": "table.filter(table.age > 18)"}, "meta": {"template": "basic_operations_qa", "variation": "how_to_filter", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "2975fc98-ad99-45c1-a866-4252e2583ed7", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I select specific columns from an Ibis table?"}, "target": {"answer": "Use the select() method or bracket notation with column names.", "code_examples": ["table.select('name', 'age')", "table[['name', 'age']]"]}, "meta": {"template": "basic_operations_qa", "variation": "select_columns", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "fa6125e5-aee9-4027-890b-512f81ed8bd9", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I rename a column in Ibis?"}, "target": {"answer": "Use the relabel() method with a dictionary mapping old names to new names.", "code_example": "table.relabel({'old_name': 'new_name'})"}, "meta": {"template": "basic_operations_qa", "variation": "rename_column", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "4ddf25a5-0701-49c4-86cf-f7bb9714617f", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I sort an Ibis table by a column?"}, "target": {"answer": "Use the order_by() method. Add ibis.desc() for descending order.", "code_examples": ["table.order_by('age')  # ascending", "table.order_by(ibis.desc('age'))  # descending"]}, "meta": {"template": "basic_operations_qa", "variation": "sort_table", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "2669b4b8-819b-41de-b764-ce6f206daa8b", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I get only the first 10 rows from an Ibis table?"}, "target": {"answer": "Use the limit() or head() method.", "code_examples": ["table.limit(10)", "table.head(10)"]}, "meta": {"template": "basic_operations_qa", "variation": "limit_rows", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "86427d3e-bc09-4c4d-91f1-b9086e013456", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I count the number of rows in an Ibis table?"}, "target": {"answer": "Use the count() method.", "code_example": "table.count()"}, "meta": {"template": "basic_operations_qa", "variation": "count_rows", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "1fba62d8-cf72-4d72-8397-357b497687ce", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I get unique values from a column in Ibis?"}, "target": {"answer": "Use the distinct() method.", "code_example": "table.select('category').distinct()"}, "meta": {"template": "basic_operations_qa", "variation": "unique_values", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "1b0766fb-8f36-47b1-aeeb-0b9b06154b84", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I filter out rows where a column is null in Ibis?"}, "target": {"answer": "Use the notnull() method in a filter.", "code_example": "table.filter(table.email.notnull())"}, "meta": {"template": "basic_operations_qa", "variation": "null_check", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "bf9f07ac-4cb3-443d-a270-610b2390d234", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I filter with multiple conditions in Ibis?"}, "target": {"answer": "Use & for AND and | for OR, with parentheses for precedence.", "code_examples": ["table.filter((table.age > 18) & (table.is_active == True))", "table.filter((table.status == 'active') | (table.status == 'pending'))"]}, "meta": {"template": "basic_operations_qa", "variation": "multiple_conditions", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "22b7bfb5-806e-43a7-8ae6-5d4a1b2571ce", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I check if a column exists in an Ibis table?"}, "target": {"answer": "Check if the column name is in the table's schema or columns list.", "code_examples": ["'age' in table.columns", "'age' in table.schema().names"]}, "meta": {"template": "basic_operations_qa", "variation": "column_exists", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "f05fa4a6-fd88-464f-9e30-d1de90481cf1", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I add a new computed column to an Ibis table?"}, "target": {"answer": "Use the mutate() method or bracket assignment.", "code_examples": ["table.mutate(age_plus_one=table.age + 1)", "table['age_plus_one'] = table.age + 1"]}, "meta": {"template": "basic_operations_qa", "variation": "add_column", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "fb8c4ddc-670e-41c5-9af4-1a54dabb70e1", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I remove a column from an Ibis table?"}, "target": {"answer": "Use the drop() method.", "code_example": "table.drop('unwanted_column')"}, "meta": {"template": "basic_operations_qa", "variation": "drop_column", "difficulty": "easy", "features": ["qa", "filtering", "selection", "basics"]}}
{"id": "ce2e9bac-dca9-4a41-9205-d95fe5dc0c97", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I group by a column and sum another column in Ibis?"}, "target": {"answer": "Use the group_by() method followed by agg() with the sum aggregation.", "code_example": "table.group_by('category').agg(total=table.amount.sum())"}, "meta": {"template": "aggregation_qa", "variation": "how_to_groupby", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "f3d4e0e3-e8ab-463b-aabb-eafd16fb1938", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I compute multiple aggregations in a single group_by operation?"}, "target": {"answer": "Pass multiple named aggregations to the agg() method.", "code_examples": ["table.group_by('region').agg(total=table.sales.sum(), avg=table.sales.mean(), count=table.count())"]}, "meta": {"template": "aggregation_qa", "variation": "multiple_aggregations", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "755c3de0-d094-47fd-a665-fc2a4916d8a8", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I count unique values in Ibis?"}, "target": {"answer": "Use the nunique() method on a column within an aggregation.", "code_example": "table.group_by('page').agg(unique_visitors=table.user_id.nunique())"}, "meta": {"template": "aggregation_qa", "variation": "count_distinct", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "45adfae9-129a-4bea-ad1c-485207dc5c64", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I group by multiple columns in Ibis?"}, "target": {"answer": "Pass a list of column names to group_by().", "code_example": "table.group_by(['region', 'category']).agg(total=table.sales.sum())"}, "meta": {"template": "aggregation_qa", "variation": "groupby_multiple_columns", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "bf6f093e-a0a1-4d05-be7b-e2e7c9518fb1", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I filter groups after aggregation (like SQL HAVING)?"}, "target": {"answer": "Apply filter() after the aggregation.", "code_example": "result = table.group_by('customer_id').agg(order_count=table.count())\nresult.filter(result.order_count >= 10)\n"}, "meta": {"template": "aggregation_qa", "variation": "having_clause", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "40e15854-d8ea-4115-a7af-70bda8a42c4d", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I count rows meeting a condition within each group?"}, "target": {"answer": "Use a boolean expression with sum() to count True values.", "code_example": "table.group_by('category').agg(high_value=(table.amount > 1000).sum())"}, "meta": {"template": "aggregation_qa", "variation": "conditional_aggregation", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "df09af11-1780-477f-b0bd-28598abac9b5", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What aggregation functions are available in Ibis?"}, "target": {"answer": "Common aggregations include sum(), mean(), min(), max(), count(), std(), var(), nunique(), and more.", "code_example": "table.group_by('category').agg(\n    total=table.amount.sum(),\n    average=table.amount.mean(),\n    minimum=table.amount.min(),\n    maximum=table.amount.max(),\n    count=table.count()\n)\n"}, "meta": {"template": "aggregation_qa", "variation": "aggregation_functions", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "8e444894-09d5-4896-8139-84f5e12bfeb5", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I aggregate the entire table without grouping?"}, "target": {"answer": "Use aggregate() or agg() directly without group_by().", "code_examples": ["table.aggregate(total=table.amount.sum())", "table.agg(avg_age=table.age.mean())"]}, "meta": {"template": "aggregation_qa", "variation": "aggregate_without_groupby", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "39a9e44a-7015-425b-b5b7-f8205292a524", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I get the first or last value in each group?"}, "target": {"answer": "Use first() or last() aggregation functions.", "code_example": "table.group_by('customer_id').agg(first_purchase=table.purchase_date.min(), last_purchase=table.purchase_date.max())"}, "meta": {"template": "aggregation_qa", "variation": "first_last_in_group", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "2efa9d01-666c-4713-b3bb-457c5f4b228b", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I calculate standard deviation and variance by group?"}, "target": {"answer": "Use the std() and var() methods.", "code_example": "table.group_by('category').agg(std_price=table.price.std(), var_price=table.price.var())"}, "meta": {"template": "aggregation_qa", "variation": "stddev_variance", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "512eac9d-c990-4fff-aac1-0e8ec5b8028f", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I calculate what percentage each group represents of the total?"}, "target": {"answer": "Compute group totals, then divide by overall total.", "code_example": "grouped = table.group_by('category').agg(group_total=table.sales.sum())\noverall_total = table.sales.sum()\ngrouped.mutate(percentage=grouped.group_total / overall_total * 100)\n"}, "meta": {"template": "aggregation_qa", "variation": "percentage_of_total", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "90240417-2dd8-47f1-86c5-40c902286d5f", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "Should I filter before or after grouping?"}, "target": {"answer": "Filter before grouping (WHERE) to reduce data, filter after grouping (HAVING) to filter aggregated results.", "code_examples": ["table.filter(table.year == 2024).group_by('region').agg(total=table.sales.sum())  # Filter before", "result = table.group_by('region').agg(total=table.sales.sum())\nresult.filter(result.total > 10000)  # Filter after"]}, "meta": {"template": "aggregation_qa", "variation": "filter_before_aggregation", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "b909d252-10a2-4bc7-add1-7aa53cb3f2a0", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What's the difference between count() and counting rows?"}, "target": {"answer": "count() counts non-null values in a column, while table.count() counts all rows.", "code_examples": ["table.email.count()  # Count non-null emails", "table.count()  # Count all rows"]}, "meta": {"template": "aggregation_qa", "variation": "count_vs_size", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "3517f8d2-8ccb-46d6-aeb1-67a9422748a5", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How are NULL values handled in aggregations?"}, "target": {"answer": "Most aggregations ignore NULL values. sum(), mean(), etc. compute over non-null values only.", "code_example": "table.group_by('category').agg(avg_rating=table.rating.mean())  # NULLs ignored"}, "meta": {"template": "aggregation_qa", "variation": "aggregation_with_null", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "45e59892-016d-4380-ad1c-5a277eec8807", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I calculate the median in Ibis?"}, "target": {"answer": "Use the approx_median() method for approximate median.", "code_example": "table.group_by('category').agg(median_price=table.price.approx_median())"}, "meta": {"template": "aggregation_qa", "variation": "median_calculation", "difficulty": "medium", "features": ["qa", "aggregation", "group_by"]}}
{"id": "e001f4ce-7f36-4d4f-a517-359dfc38ed28", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I join two tables in Ibis?"}, "target": {"answer": "Use the join() method with a join condition.", "code_example": "orders.join(customers, orders.customer_id == customers.customer_id)"}, "meta": {"template": "joins_qa", "variation": "basic_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "923aee2d-0c04-4c74-85a0-cfb40f4d2043", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I do a left join in Ibis?"}, "target": {"answer": "Use the left_join() method.", "code_example": "users.left_join(profiles, users.user_id == profiles.user_id)"}, "meta": {"template": "joins_qa", "variation": "left_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "abd0f90d-9d23-453e-869e-aeaff7e29ce9", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What's the difference between join() and left_join()?"}, "target": {"answer": "join() is an inner join (only matching rows), left_join() keeps all rows from the left table.", "code_examples": ["table_a.join(table_b, condition)  # Inner join - only matches", "table_a.left_join(table_b, condition)  # Left join - all from table_a"]}, "meta": {"template": "joins_qa", "variation": "inner_vs_left", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "a02f8b5d-0cca-4509-ad22-1cd39a218ccc", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I do a full outer join in Ibis?"}, "target": {"answer": "Use the outer_join() method.", "code_example": "table_a.outer_join(table_b, table_a.id == table_b.id)"}, "meta": {"template": "joins_qa", "variation": "outer_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "4a5e8e2a-cb4c-4567-91d3-8d2530c0221d", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I join on multiple columns?"}, "target": {"answer": "Combine multiple conditions with & operator.", "code_example": "sales_a.join(sales_b, (sales_a.region == sales_b.region) & (sales_a.quarter == sales_b.quarter))"}, "meta": {"template": "joins_qa", "variation": "multiple_join_conditions", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "09fe5e05-8567-49bb-bb65-5eb8e499c4a3", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I find rows in one table that don't exist in another?"}, "target": {"answer": "Use anti_join() or left join with null filter.", "code_examples": ["table_a.anti_join(table_b, table_a.id == table_b.id)", "table_a.left_join(table_b, table_a.id == table_b.id).filter(table_b.id.isnull())"]}, "meta": {"template": "joins_qa", "variation": "anti_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "644e956c-d747-4c3a-a977-9a4451fdbe05", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What is a semi join and when would I use it?"}, "target": {"answer": "Semi join returns rows from left table that have matches in right table, without duplicating or adding right table columns.", "code_example": "products.semi_join(recent_orders, products.product_id == recent_orders.product_id)"}, "meta": {"template": "joins_qa", "variation": "semi_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "ecb735c5-935e-4735-9022-e740c7f37185", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I join a table to itself?"}, "target": {"answer": "Relabel one copy of the table and join it to the original.", "code_example": "managers = employees.relabel({'employee_id': 'manager_id', 'name': 'manager_name'})\nemployees.join(managers, employees.manager_id == managers.manager_id)\n"}, "meta": {"template": "joins_qa", "variation": "self_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "ef7652f3-7818-40d6-8723-e4bda6937db4", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I join multiple tables together?"}, "target": {"answer": "Chain join methods together.", "code_example": "orders.join(customers, orders.customer_id == customers.customer_id).join(products, orders.product_id == products.product_id)"}, "meta": {"template": "joins_qa", "variation": "chaining_joins", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "48467206-4618-46ef-8b60-99575581c2e3", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How do I do a cartesian product / cross join?"}, "target": {"answer": "Use cross_join() method.", "code_example": "colors.cross_join(sizes)"}, "meta": {"template": "joins_qa", "variation": "cross_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "e5ddb394-b0a3-494d-aae7-56947bd48a23", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What is an asof join and when is it useful?"}, "target": {"answer": "Asof join matches on nearest key (useful for time-series). Joins based on closest preceding timestamp.", "code_example": "trades.asof_join(quotes, 'timestamp', predicates=trades.symbol == quotes.symbol)"}, "meta": {"template": "joins_qa", "variation": "asof_join", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "5f8fa943-15b7-4dda-b539-a11020d206e2", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "What happens when joined tables have columns with the same name?"}, "target": {"answer": "Both columns are kept. Access them through table prefixes or use relabel() to rename.", "code_example": "# Relabel before joining to avoid conflicts\ncustomers_renamed = customers.relabel({'id': 'customer_id'})\norders.join(customers_renamed, ...)\n"}, "meta": {"template": "joins_qa", "variation": "join_column_conflict", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "378b0bae-8495-4c83-b6f9-aaf0f06562f4", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "Can I filter before or after joining?"}, "target": {"answer": "Yes, you can filter before joining (more efficient) or after joining.", "code_examples": ["filtered_orders.join(customers, ...)  # Filter first", "orders.join(customers, ...).filter(...)  # Filter after"]}, "meta": {"template": "joins_qa", "variation": "join_with_filter", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "c3150a19-f196-45ae-b9f0-99578e4178dd", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How can I make joins faster?"}, "target": {"answer": "Filter before joining to reduce data size, ensure join keys are indexed in your backend.", "code_example": "orders.filter(orders.date >= '2024-01-01').join(customers, ...)  # Reduce data first"}, "meta": {"template": "joins_qa", "variation": "join_performance", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "fca82527-c3f3-4b5e-9f0c-f753972a139e", "task": "qa", "system_prompt": "You are an expert in Ibis, a Python library for data manipulation.\nAnswer questions about Ibis clearly and concisely with code examples when helpful.", "input": {"question": "How are NULL values handled in joins?"}, "target": {"answer": "NULLs don't match in joins (NULL != NULL). Rows with NULL join keys won't match.", "code_example": "# NULL values in join columns won't create matches"}, "meta": {"template": "joins_qa", "variation": "null_in_joins", "difficulty": "medium", "features": ["qa", "joins", "merge"]}}
{"id": "1785c4cb-4f09-49e5-9ef3-5474428c0d4b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10"}, "target": {"ibis": "events.filter(events.amount > 10)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "select_where", "variation": "simple_numeric", "features": ["select", "where", "filter"], "source": "synthetic", "difficulty": "easy"}}
{"id": "3a48a94c-2abd-4894-918a-af2583cd76c5", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE event_ts >= '2024-01-01'"}, "target": {"ibis": "events.filter(events.event_ts >= \"2024-01-01\")[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "select_where", "variation": "timestamp_filter", "features": ["select", "where", "filter"], "source": "synthetic", "difficulty": "easy"}}
{"id": "5bf20c8d-1428-4556-8172-ec8058162059", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id = 1"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "select_where", "variation": "compound_filter", "features": ["select", "where", "filter"], "source": "synthetic", "difficulty": "easy"}}
{"id": "af539372-62e3-4b83-8afc-e7ae4150b550", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name = 'Alice'"}, "target": {"ibis": "users.filter(users.name == \"Alice\")[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "select_where", "variation": "string_filter", "features": ["select", "where", "filter"], "source": "synthetic", "difficulty": "easy"}}
{"id": "607f1ef4-d889-434d-8b23-cdfdf8b7b3b2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    n=events.count()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_aggregate", "variation": "count_by_user", "features": ["groupby", "aggregate", "count", "sum", "avg"], "source": "synthetic", "difficulty": "easy"}}
{"id": "59b921c0-d6ba-40b6-8859-77a3d8049338", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS total\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    total=events.amount.sum()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_aggregate", "variation": "sum_by_user", "features": ["groupby", "aggregate", "count", "sum", "avg"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e13f648b-c589-4fba-91b4-3a5369cbb740", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n, SUM(amount) AS total, AVG(amount) AS avg_amt\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    n=events.count(),\n    total=events.amount.sum(),\n    avg_amt=events.amount.mean()\n\n)", "expr_name": "expr"}, "meta": {"template": "groupby_aggregate", "variation": "multi_agg", "features": ["groupby", "aggregate", "count", "sum", "avg"], "source": "synthetic", "difficulty": "easy"}}
{"id": "13a4c96b-a324-4f26-9e16-e1517818fc68", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, CAST(event_ts AS DATE) AS event_date, COUNT(*) AS n\nFROM events\nGROUP BY user_id, CAST(event_ts AS DATE)"}, "target": {"ibis": "events.group_by(\"user_id\", event_date=events.event_ts.date()).aggregate(\n    n=ibis._.count()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_aggregate", "variation": "multi_key_group", "features": ["groupby", "aggregate", "count", "sum", "avg"], "source": "synthetic", "difficulty": "easy"}}
{"id": "f1da50c5-e50a-427b-8786-a1089539cda6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n, SUM(amount) AS total\nFROM events\nWHERE event_ts >= '2024-01-01'\nGROUP BY user_id"}, "target": {"ibis": "(\n    events\n    .filter(events.event_ts >= \"2024-01-01\")\n    .group_by(\"user_id\")\n    .aggregate(n=ibis._.count(), total=ibis._.amount.sum())\n)", "expr_name": "expr"}, "meta": {"template": "filter_groupby", "variation": "recent_user_totals", "features": ["where", "filter", "groupby", "aggregate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "78f9e1a6-2e41-4133-96c8-81cbec758dda", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS high_value_count\nFROM events\nWHERE amount > 50\nGROUP BY user_id"}, "target": {"ibis": "(\n    events\n    .filter(events.amount > 50)\n    .group_by(\"user_id\")\n    .aggregate(high_value_count=ibis._.count())\n)", "expr_name": "expr"}, "meta": {"template": "filter_groupby", "variation": "high_value_counts", "features": ["where", "filter", "groupby", "aggregate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b4a37975-1192-4caf-b162-e13ca26492e4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS avg_amount\nFROM events\nWHERE event_ts >= '2024-01-01' AND amount > 10\nGROUP BY user_id"}, "target": {"ibis": "(\n    events\n    .filter((events.event_ts >= \"2024-01-01\") & (events.amount > 10))\n    .group_by(\"user_id\")\n    .aggregate(avg_amount=ibis._.amount.mean())\n)", "expr_name": "expr"}, "meta": {"template": "filter_groupby", "variation": "compound_filter_agg", "features": ["where", "filter", "groupby", "aggregate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5abdf2bf-3868-4208-996e-ae4ad61c3487", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\n\nORDER BY amount DESC\nLIMIT 10"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].order_by(ibis.desc(\"amount\")).limit(10)", "expr_name": "expr"}, "meta": {"template": "order_limit", "variation": "top_amounts", "features": ["order_by", "limit", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "0c4f40f8-ca9f-43ef-ade8-63971364dd5f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\n\nORDER BY event_ts DESC\nLIMIT 5"}, "target": {"ibis": "events[[\"user_id\", \"event_ts\", \"amount\"]].order_by(ibis.desc(\"event_ts\")).limit(5)", "expr_name": "expr"}, "meta": {"template": "order_limit", "variation": "recent_events", "features": ["order_by", "limit", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9276add1-a121-4e24-beea-f19e4222b841", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20\nORDER BY amount ASC\nLIMIT 3"}, "target": {"ibis": "events.filter(events.amount > 20)[[\"user_id\", \"amount\"]].order_by(\"amount\").limit(3)", "expr_name": "expr"}, "meta": {"template": "order_limit", "variation": "filtered_sorted", "features": ["order_by", "limit", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "6e754201-056b-4c46-97a2-f6c87c60eb3f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\n\nORDER BY user_id ASC, event_ts DESC\nLIMIT 20"}, "target": {"ibis": "events[[\"user_id\", \"event_ts\", \"amount\"]].order_by(\"user_id\", ibis.desc(\"event_ts\")).limit(20)", "expr_name": "expr"}, "meta": {"template": "order_limit", "variation": "multi_column_sort", "features": ["order_by", "limit", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "58f9167c-6793-48fc-bdc1-bf7f3252fe2a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount, l.label\nFROM events e\nINNER JOIN labels l ON e.user_id = l.user_id"}, "target": {"ibis": "events.join(labels, events.user_id == labels.user_id, how=\"inner\")[[\"user_id\", \"amount\", \"label\"]]", "expr_name": "expr"}, "meta": {"template": "join", "variation": "inner_join_simple", "features": ["join", "inner_join", "left_join"], "source": "synthetic", "difficulty": "medium"}}
{"id": "28b18154-74d7-4442-ae54-c526d5c793a0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount, l.label\nFROM events e\nLEFT JOIN labels l ON e.user_id = l.user_id"}, "target": {"ibis": "events.join(labels, events.user_id == labels.user_id, how=\"left\")[[\"user_id\", \"amount\", \"label\"]]", "expr_name": "expr"}, "meta": {"template": "join", "variation": "left_join_simple", "features": ["join", "inner_join", "left_join"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ce9c3b0b-ab64-4e23-94a5-327373bf7305", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n\nFROM events\nGROUP BY user_id\nHAVING COUNT(*) > 2"}, "target": {"ibis": "(\n    events\n    .group_by(\"user_id\")\n    .aggregate(n=ibis._.count())\n    .filter(ibis._.n > 2)\n)", "expr_name": "expr"}, "meta": {"template": "having_clause", "variation": "having_count", "features": ["groupby", "aggregate", "having", "filter"], "source": "synthetic", "difficulty": "medium"}}
{"id": "230ab5aa-57d3-433f-83e0-e6570ac0e26c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS total\nFROM events\nGROUP BY user_id\nHAVING SUM(amount) > 50"}, "target": {"ibis": "(\n    events\n    .group_by(\"user_id\")\n    .aggregate(total=ibis._.amount.sum())\n    .filter(ibis._.total > 50)\n)", "expr_name": "expr"}, "meta": {"template": "having_clause", "variation": "having_sum", "features": ["groupby", "aggregate", "having", "filter"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f57554ef-4bb3-46e6-8233-6cc869ff4364", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS avg_amt\nFROM events\nGROUP BY user_id\nHAVING AVG(amount) >= 20"}, "target": {"ibis": "(\n    events\n    .group_by(\"user_id\")\n    .aggregate(avg_amt=ibis._.amount.mean())\n    .filter(ibis._.avg_amt >= 20)\n)", "expr_name": "expr"}, "meta": {"template": "having_clause", "variation": "having_avg", "features": ["groupby", "aggregate", "having", "filter"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0bd21c2a-8ebb-43e2-ab48-1f03b4fc83ca", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CASE\n    WHEN amount > 30 THEN 'high'\n    WHEN amount > 15 THEN 'medium'\n    ELSE 'low'\nEND AS category\n\nFROM events"}, "target": {"ibis": "events.mutate(category=ibis.cases(\n    (events.amount > 30, \"high\"),\n    (events.amount > 15, \"medium\"),\n    else_=\"low\",\n)\n)[[\"user_id\", \"amount\", \"category\"]]", "expr_name": "expr"}, "meta": {"template": "case_when", "variation": "simple_case", "features": ["case", "when", "conditional", "mutate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "212c7119-6b86-4f4f-bb51-e8cb9ead9e3b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY event_ts) AS row_num\nFROM events"}, "target": {"ibis": "events.mutate(row_num=(ibis.row_number().over(\n    ibis.window(group_by=\"user_id\", order_by=\"event_ts\")\n) + 1)\n)[[\"user_id\", \"event_ts\", \"amount\", \"row_num\"]]", "expr_name": "expr"}, "meta": {"template": "window_functions", "variation": "row_number_by_user", "features": ["window", "partition", "order_by", "rank", "row_number"], "source": "synthetic", "difficulty": "hard"}}
{"id": "c1d6a79a-1ae4-4cd3-b9ab-1846b614c81a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, RANK() OVER (ORDER BY amount DESC) AS amount_rank\nFROM events"}, "target": {"ibis": "events.mutate(amount_rank=(ibis.rank().over(\n    ibis.window(order_by=ibis.desc(\"amount\"))\n) + 1)\n)[[\"user_id\", \"amount\", \"amount_rank\"]]", "expr_name": "expr"}, "meta": {"template": "window_functions", "variation": "rank_by_amount", "features": ["window", "partition", "order_by", "rank", "row_number"], "source": "synthetic", "difficulty": "hard"}}
{"id": "c80d3262-d525-49a3-9993-de533db4bcb1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT DISTINCT user_id\nFROM events"}, "target": {"ibis": "events[[\"user_id\"]].distinct()", "expr_name": "expr"}, "meta": {"template": "distinct", "variation": "distinct_users", "features": ["distinct", "unique"], "source": "synthetic", "difficulty": "easy"}}
{"id": "18846ed3-ec94-41e4-a48c-67010fa70171", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT DISTINCT user_id\nFROM events\nWHERE amount > 20"}, "target": {"ibis": "events.filter(events.amount > 20)[[\"user_id\"]].distinct()", "expr_name": "expr"}, "meta": {"template": "distinct", "variation": "distinct_filtered", "features": ["distinct", "unique"], "source": "synthetic", "difficulty": "easy"}}
{"id": "dd7d10b9-bf00-411c-9bc4-4ef2bc7d987e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT DISTINCT user_id, CAST(event_ts AS DATE) as event_date\nFROM events"}, "target": {"ibis": "events.select(user_id=events.user_id, event_date=events.event_ts.date()).distinct()", "expr_name": "expr"}, "meta": {"template": "distinct", "variation": "distinct_multi_col", "features": ["distinct", "unique"], "source": "synthetic", "difficulty": "easy"}}
{"id": "4a2d92fb-bc6b-43e8-ad0d-0164d6a73440", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount IS NOT NULL"}, "target": {"ibis": "events.filter(events.amount.notnull())[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "null_handling", "variation": "filter_nulls", "features": ["coalesce", null, "is_null", "fillna"], "source": "synthetic", "difficulty": "easy"}}
{"id": "acd8aab9-18e3-4b27-b25a-0b40f169847d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COALESCE(amount, 0) as amount_filled\nFROM events"}, "target": {"ibis": "events.select(user_id=events.user_id, amount_filled=events.amount.fillna(0))", "expr_name": "expr"}, "meta": {"template": "null_handling", "variation": "coalesce_simple", "features": ["coalesce", null, "is_null", "fillna"], "source": "synthetic", "difficulty": "easy"}}
{"id": "1514212c-4eee-46f1-b1dd-2e32356d681e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(YEAR FROM event_ts) AS event_year\nFROM events"}, "target": {"ibis": "events.mutate(event_year=events.event_ts.year())[[\"user_id\", \"event_ts\", \"event_year\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "extract_year", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "1b35ee4b-4f6a-442a-b3bb-6bbe69c9f66e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(MONTH FROM event_ts) AS event_month\nFROM events"}, "target": {"ibis": "events.mutate(event_month=events.event_ts.month())[[\"user_id\", \"event_ts\", \"event_month\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "extract_month", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "70622e2f-4295-4524-823e-4479582ff73d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(DAY FROM event_ts) AS event_day\nFROM events"}, "target": {"ibis": "events.mutate(event_day=events.event_ts.day())[[\"user_id\", \"event_ts\", \"event_day\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "extract_day", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b43364c6-c6dc-4923-808e-4f0f2354d6d7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(HOUR FROM event_ts) AS event_hour\nFROM events"}, "target": {"ibis": "events.mutate(event_hour=events.event_ts.hour())[[\"user_id\", \"event_ts\", \"event_hour\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "extract_hour", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "94e5c770-8efe-449a-8fc1-8778cf0a4c2c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, CAST(event_ts AS DATE) AS event_date\nFROM events"}, "target": {"ibis": "events.mutate(event_date=events.event_ts.date())[[\"user_id\", \"event_ts\", \"event_date\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "cast_to_date", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a50e345f-3c02-4e09-b70f-cd167d9e16a1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(QUARTER FROM event_ts) AS event_quarter\nFROM events"}, "target": {"ibis": "events.mutate(event_quarter=events.event_ts.quarter())[[\"user_id\", \"event_ts\", \"event_quarter\"]]", "expr_name": "expr"}, "meta": {"template": "temporal", "variation": "extract_quarter", "features": ["temporal", "date", "timestamp", "extract", "truncate"], "source": "synthetic", "difficulty": "medium"}}
{"id": "196d635a-a018-4b46-ab62-e55ada2c0440", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events"}, "target": {"ibis": "import ibis.selectors as s\nevents.select(s.numeric())", "expr_name": "expr"}, "meta": {"template": "selectors", "variation": "select_numeric", "features": ["selectors", "select", "column_selection"], "source": "synthetic", "difficulty": "medium"}}
{"id": "42abb43d-414a-4af6-9de9-8d2a2484424a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events"}, "target": {"ibis": "import ibis.selectors as s\nevents.select(s.all())", "expr_name": "expr"}, "meta": {"template": "selectors", "variation": "select_all", "features": ["selectors", "select", "column_selection"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2e44d984-a7ea-4854-b5e1-fe7ed5c6ba38", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, ARRAY_LENGTH(ARRAY[user_id, CAST(amount AS BIGINT)], 1) AS arr_len\nFROM events"}, "target": {"ibis": "events.mutate(arr_len=ibis.array([events.user_id, events.amount.cast(\"int64\")]).length())[[\"user_id\", \"amount\", \"arr_len\"]]", "expr_name": "expr"}, "meta": {"template": "collections", "variation": "array_length", "features": ["array", "collections", "unnest"], "source": "synthetic", "difficulty": "hard"}}
{"id": "8e02f672-0613-4095-b7f0-80e0903b3db6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount, ABS(amount) AS abs_amount\nFROM events"}, "target": {"ibis": "import ibis\n@ibis.udf.scalar.builtin(name=\"abs\")\ndef abs_val(x: float) -> float:\n    \"\"\"Absolute value.\"\"\"\n\nevents.mutate(abs_amount=abs_val(events.amount))[[\"user_id\", \"amount\", \"abs_amount\"]]", "expr_name": "expr"}, "meta": {"template": "udf_scalar_builtin", "variation": "abs_builtin", "features": ["udf", "scalar", "builtin", "functions"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e2b6cc90-677c-428e-9652-f44d51b0e51a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount, ROUND(amount, 1) AS rounded_amount\nFROM events"}, "target": {"ibis": "import ibis\n@ibis.udf.scalar.builtin(name=\"round\")\ndef round_val(x: float, decimals: int) -> float:\n    \"\"\"Round to N decimals.\"\"\"\n\nevents.mutate(rounded_amount=round_val(events.amount, 1))[[\"user_id\", \"amount\", \"rounded_amount\"]]", "expr_name": "expr"}, "meta": {"template": "udf_scalar_builtin", "variation": "round_builtin", "features": ["udf", "scalar", "builtin", "functions"], "source": "synthetic", "difficulty": "medium"}}
{"id": "7726f95a-1c99-48a9-98c1-3ef06215be48", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, UPPER(name) AS upper_name\nFROM users"}, "target": {"ibis": "import ibis\n@ibis.udf.scalar.builtin(name=\"upper\")\ndef to_upper(s: str) -> str:\n    \"\"\"Convert to uppercase.\"\"\"\n\nusers.mutate(upper_name=to_upper(users.name))[[\"user_id\", \"name\", \"upper_name\"]]", "expr_name": "expr"}, "meta": {"template": "udf_scalar_builtin", "variation": "upper_builtin", "features": ["udf", "scalar", "builtin", "functions"], "source": "synthetic", "difficulty": "medium"}}
{"id": "34a2262f-e977-4ea1-9b51-2e46a054294b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, LOWER(name) AS lower_name\nFROM users"}, "target": {"ibis": "import ibis\n@ibis.udf.scalar.builtin(name=\"lower\")\ndef to_lower(s: str) -> str:\n    \"\"\"Convert to lowercase.\"\"\"\n\nusers.mutate(lower_name=to_lower(users.name))[[\"user_id\", \"name\", \"lower_name\"]]", "expr_name": "expr"}, "meta": {"template": "udf_scalar_builtin", "variation": "lower_builtin", "features": ["udf", "scalar", "builtin", "functions"], "source": "synthetic", "difficulty": "medium"}}
{"id": "6594986f-b8bb-400c-8963-131ed445ae55", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS avg_amount\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "import ibis\n@ibis.udf.agg.builtin(name=\"avg\")\ndef custom_avg(x: float) -> float:\n    \"\"\"Average aggregation.\"\"\"\n\nevents.group_by(\"user_id\").aggregate(avg_amount=custom_avg(events.amount))", "expr_name": "expr"}, "meta": {"template": "udf_agg_builtin", "variation": "avg_builtin", "features": ["udf", "aggregate", "builtin", "groupby"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d66457c9-1e18-4c84-8680-b5f3c919d94f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS total_amount\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "import ibis\n@ibis.udf.agg.builtin(name=\"sum\")\ndef custom_sum(x: float) -> float:\n    \"\"\"Sum aggregation.\"\"\"\n\nevents.group_by(\"user_id\").aggregate(total_amount=custom_sum(events.amount))", "expr_name": "expr"}, "meta": {"template": "udf_agg_builtin", "variation": "sum_builtin", "features": ["udf", "aggregate", "builtin", "groupby"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d9edc1eb-e6fb-4286-947c-f4c9c640ca5d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS event_count\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "import ibis\n@ibis.udf.agg.builtin(name=\"count\")\ndef custom_count(x: int) -> int:\n    \"\"\"Count aggregation.\"\"\"\n\nevents.group_by(\"user_id\").aggregate(event_count=custom_count(events.user_id))", "expr_name": "expr"}, "meta": {"template": "udf_agg_builtin", "variation": "count_builtin", "features": ["udf", "aggregate", "builtin", "groupby"], "source": "synthetic", "difficulty": "medium"}}
{"id": "589d8a04-db7f-49c8-a405-40721c77434f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS max_amount\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "import ibis\n@ibis.udf.agg.builtin(name=\"max\")\ndef custom_max(x: float) -> float:\n    \"\"\"Max aggregation.\"\"\"\n\nevents.group_by(\"user_id\").aggregate(max_amount=custom_max(events.amount))", "expr_name": "expr"}, "meta": {"template": "udf_agg_builtin", "variation": "max_builtin", "features": ["udf", "aggregate", "builtin", "groupby"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0d253dd0-c49e-42df-be00-65311871c81a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS min_amount\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "import ibis\n@ibis.udf.agg.builtin(name=\"min\")\ndef custom_min(x: float) -> float:\n    \"\"\"Min aggregation.\"\"\"\n\nevents.group_by(\"user_id\").aggregate(min_amount=custom_min(events.amount))", "expr_name": "expr"}, "meta": {"template": "udf_agg_builtin", "variation": "min_builtin", "features": ["udf", "aggregate", "builtin", "groupby"], "source": "synthetic", "difficulty": "medium"}}
{"id": "6cad474c-4c05-4720-a874-0ae0ab6e7ef1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, STDDEV(amount) AS amount_stddev\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    amount_stddev=events.amount.std()\n)", "expr_name": "expr"}, "meta": {"template": "advanced_aggregations", "variation": "stddev_by_user", "features": ["aggregate", "statistics", "stddev", "variance", "median", "percentile"], "source": "synthetic", "difficulty": "medium"}}
{"id": "46abbd72-5f80-4447-ad69-74ca5a7f7afe", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, VARIANCE(amount) AS amount_var\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    amount_var=events.amount.var()\n)", "expr_name": "expr"}, "meta": {"template": "advanced_aggregations", "variation": "variance_by_user", "features": ["aggregate", "statistics", "stddev", "variance", "median", "percentile"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0e4955dc-9d79-4fb7-ae61-b4df0b38675e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS min_amt, MAX(amount) AS max_amt\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    min_amt=events.amount.min(),\n    max_amt=events.amount.max()\n\n)", "expr_name": "expr"}, "meta": {"template": "advanced_aggregations", "variation": "min_max_by_user", "features": ["aggregate", "statistics", "stddev", "variance", "median", "percentile"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f06d5361-5f8b-4cf5-8284-cdecef4578d1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n, AVG(amount) AS mean_amt, STDDEV(amount) AS std_amt, MIN(amount) AS min_amt, MAX(amount) AS max_amt\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    n=events.count(),\n    mean_amt=events.amount.mean(),\n    std_amt=events.amount.std(),\n    min_amt=events.amount.min(),\n    max_amt=events.amount.max()\n\n)", "expr_name": "expr"}, "meta": {"template": "advanced_aggregations", "variation": "full_stats", "features": ["aggregate", "statistics", "stddev", "variance", "median", "percentile"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2bc2cfb4-219c-47ca-8dbc-e1bcba81ebd8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(DISTINCT event_ts) AS distinct_days\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    distinct_days=events.event_ts.nunique()\n)", "expr_name": "expr"}, "meta": {"template": "advanced_aggregations", "variation": "count_distinct", "features": ["aggregate", "statistics", "stddev", "variance", "median", "percentile"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d37b1fc8-fafc-4615-b376-6ec9fb1e1a3c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, UPPER(name) AS name_upper\nFROM users"}, "target": {"ibis": "users.mutate(name_upper=users.name.upper())[[\"user_id\", \"name\", \"name_upper\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "upper_case", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ecedb47a-0a4e-4375-9db5-203d34c07b08", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, LOWER(name) AS name_lower\nFROM users"}, "target": {"ibis": "users.mutate(name_lower=users.name.lower())[[\"user_id\", \"name\", \"name_lower\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "lower_case", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "62fc2027-c878-4c5d-8d1f-1c298796eab4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, CONCAT('User: ', name) AS display_name\nFROM users"}, "target": {"ibis": "users.mutate(display_name=('User: ' + users.name))[[\"user_id\", \"name\", \"display_name\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "concat_strings", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "672d60b3-0c00-4621-b7a8-f8c45037ca5c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, LENGTH(name) AS name_len\nFROM users"}, "target": {"ibis": "users.mutate(name_len=users.name.length())[[\"user_id\", \"name\", \"name_len\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "string_length", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "deb82702-84ce-4a81-a747-58d63495308e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, SUBSTRING(name, 1, 3) AS name_prefix\nFROM users"}, "target": {"ibis": "users.mutate(name_prefix=users.name.substr(0, 3))[[\"user_id\", \"name\", \"name_prefix\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "substring_extraction", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d441fef9-83bf-4d85-acd1-1feb20783867", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, REPLACE(name, 'a', 'A') AS name_replaced\nFROM users"}, "target": {"ibis": "users.mutate(name_replaced=users.name.replace('a', 'A'))[[\"user_id\", \"name\", \"name_replaced\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "string_replace", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "3c5e7586-9db7-48c5-ba1d-ff7dbcbc375f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name, TRIM(name) AS name_trimmed\nFROM users"}, "target": {"ibis": "users.mutate(name_trimmed=users.name.strip())[[\"user_id\", \"name\", \"name_trimmed\"]]", "expr_name": "expr"}, "meta": {"template": "string_operations", "variation": "trim_string", "features": ["string", "concat", "upper", "lower", "substring", "replace", "length"], "source": "synthetic", "difficulty": "medium"}}
{"id": "59a810d8-5883-41cb-95ca-fb95d93ed65a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > (SELECT AVG(amount) FROM events)"}, "target": {"ibis": "events.filter(\n    events.amount > events.amount.mean()\n)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "subqueries", "variation": "scalar_subquery_in_where", "features": ["subquery", "derived_table", "scalar_subquery"], "source": "synthetic", "difficulty": "hard"}}
{"id": "cd87abac-cf8c-4774-b624-5dfd8b50e0b9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount\nFROM events e\nWHERE EXISTS (SELECT 1 FROM labels l WHERE l.user_id = e.user_id)"}, "target": {"ibis": "events.semi_join(labels, events.user_id == labels.user_id)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "subqueries", "variation": "exists_subquery", "features": ["subquery", "derived_table", "scalar_subquery"], "source": "synthetic", "difficulty": "hard"}}
{"id": "d56e7218-0565-4a21-845c-35d9f412216c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount\nFROM events e\nWHERE NOT EXISTS (SELECT 1 FROM labels l WHERE l.user_id = e.user_id)"}, "target": {"ibis": "events.anti_join(labels, events.user_id == labels.user_id)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "subqueries", "variation": "not_exists_subquery", "features": ["subquery", "derived_table", "scalar_subquery"], "source": "synthetic", "difficulty": "hard"}}
{"id": "0c251b6e-2248-48a9-8cd6-728be2be447f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT user_id, amount FROM events WHERE amount > 20\nUNION ALL\nSELECT user_id, amount FROM events WHERE amount < 5"}, "target": {"ibis": "high = events.filter(events.amount > 20)[[\"user_id\", \"amount\"]]\nlow = events.filter(events.amount < 5)[[\"user_id\", \"amount\"]]\nibis.union(high, low)", "expr_name": "expr"}, "meta": {"template": "set_operations", "variation": "union_all", "features": ["union", "union_all", "intersect", "except"], "source": "synthetic", "difficulty": "medium"}}
{"id": "25335500-0c59-4f3c-ad87-8afb589d50b2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT user_id FROM events WHERE amount > 10\nINTERSECT\nSELECT user_id FROM events WHERE event_ts >= '2024-01-02'"}, "target": {"ibis": "high_amt = events.filter(events.amount > 10)[[\"user_id\"]].distinct()\nrecent = events.filter(events.event_ts >= \"2024-01-02\")[[\"user_id\"]].distinct()\nibis.intersect(high_amt, recent)", "expr_name": "expr"}, "meta": {"template": "set_operations", "variation": "intersect", "features": ["union", "union_all", "intersect", "except"], "source": "synthetic", "difficulty": "medium"}}
{"id": "1c79e03a-58b6-4729-aa54-b681ddbefacc", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT u.user_id, u.name, e.amount\nFROM users u\nCROSS JOIN events e"}, "target": {"ibis": "users.cross_join(events)[[\"user_id\", \"name\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_joins", "variation": "cross_join", "features": ["self_join", "cross_join", "multi_join", "outer_join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "73217d60-be82-4a17-82e5-949b756bd094", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount, l.label\nFROM events e\nRIGHT JOIN labels l ON e.user_id = l.user_id"}, "target": {"ibis": "events.join(labels, events.user_id == labels.user_id, how=\"right\")[[\"user_id\", \"amount\", \"label\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_joins", "variation": "right_join", "features": ["self_join", "cross_join", "multi_join", "outer_join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "b0ae5823-135a-49bf-9f31-167f21abfeeb", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT COALESCE(e.user_id, l.user_id) AS user_id, e.amount, l.label\nFROM events e\nFULL OUTER JOIN labels l ON e.user_id = l.user_id"}, "target": {"ibis": "events.join(labels, events.user_id == labels.user_id, how=\"outer\").select(\n    user_id=ibis.coalesce(events.user_id, labels.user_id),\n    amount=events.amount,\n    label=labels.label\n)", "expr_name": "expr"}, "meta": {"template": "advanced_joins", "variation": "full_outer_join", "features": ["self_join", "cross_join", "multi_join", "outer_join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "fe54ec7a-7054-4fa5-af78-28f5f32cbb41", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, e.amount, u.name, l.label\nFROM events e\nINNER JOIN users u ON e.user_id = u.user_id\nLEFT JOIN labels l ON e.user_id = l.user_id"}, "target": {"ibis": "events.join(users, events.user_id == users.user_id, how=\"inner\").join(\n    labels, events.user_id == labels.user_id, how=\"left\"\n)[[\"user_id\", \"amount\", \"name\", \"label\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_joins", "variation": "multi_join", "features": ["self_join", "cross_join", "multi_join", "outer_join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "dfd1d7a8-3f47-435d-ad2f-46afe51ea0fe", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(WEEK FROM event_ts) AS week_num\nFROM events"}, "target": {"ibis": "events.mutate(week_num=events.event_ts.week_of_year())[[\"user_id\", \"event_ts\", \"week_num\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_temporal", "variation": "extract_week", "features": ["temporal", "date_diff", "date_add", "date_trunc", "interval"], "source": "synthetic", "difficulty": "medium"}}
{"id": "7f0f9208-074e-4a54-9dcd-a9bb3d72897b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(MINUTE FROM event_ts) AS minute\nFROM events"}, "target": {"ibis": "events.mutate(minute=events.event_ts.minute())[[\"user_id\", \"event_ts\", \"minute\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_temporal", "variation": "extract_minute", "features": ["temporal", "date_diff", "date_add", "date_trunc", "interval"], "source": "synthetic", "difficulty": "medium"}}
{"id": "13bf05e3-9e71-4f84-8e66-23ba1b297cde", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(SECOND FROM event_ts) AS second\nFROM events"}, "target": {"ibis": "events.mutate(second=events.event_ts.second())[[\"user_id\", \"event_ts\", \"second\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_temporal", "variation": "extract_second", "features": ["temporal", "date_diff", "date_add", "date_trunc", "interval"], "source": "synthetic", "difficulty": "medium"}}
{"id": "bbcb8aa4-b4cd-4c44-ba5e-6f4cd72e8ae9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount, FIRST_VALUE(amount) OVER (PARTITION BY user_id ORDER BY event_ts) AS first_amount\nFROM events"}, "target": {"ibis": "events.mutate(first_amount=events.amount.first().over(\n    ibis.window(group_by=\"user_id\", order_by=\"event_ts\")\n)\n)[[\"user_id\", \"event_ts\", \"amount\", \"first_amount\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_window_functions", "variation": "first_value", "features": ["window", "lead", "lag", "first_value", "last_value", "ntile", "dense_rank"], "source": "synthetic", "difficulty": "hard"}}
{"id": "9f48d633-13b5-4c79-b333-eb2363ff9e5b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, DENSE_RANK() OVER (ORDER BY amount DESC) AS dense_rnk\nFROM events"}, "target": {"ibis": "events.mutate(dense_rnk=(ibis.dense_rank().over(\n    ibis.window(order_by=ibis.desc(\"amount\"))\n) + 1)\n)[[\"user_id\", \"amount\", \"dense_rnk\"]]", "expr_name": "expr"}, "meta": {"template": "advanced_window_functions", "variation": "dense_rank", "features": ["window", "lead", "lag", "first_value", "last_value", "ntile", "dense_rank"], "source": "synthetic", "difficulty": "hard"}}
{"id": "e0cf2e42-0712-494f-883f-aef848e0eb48", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) FILTER (WHERE amount > 10) AS high_amount_count\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    high_amount_count=(events.amount > 10).sum()\n)", "expr_name": "expr"}, "meta": {"template": "conditional_aggregations", "variation": "count_with_filter", "features": ["aggregate", "filter", "conditional", "case_when"], "source": "synthetic", "difficulty": "medium"}}
{"id": "4a697b45-698e-47c3-b4db-89e1b9caad92", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) FILTER (WHERE amount > 20) AS high_count, COUNT(*) FILTER (WHERE amount <= 10) AS low_count\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    high_count=(events.amount > 20).sum(),\n    low_count=(events.amount <= 10).sum()\n\n)", "expr_name": "expr"}, "meta": {"template": "conditional_aggregations", "variation": "multiple_conditional_counts", "features": ["aggregate", "filter", "conditional", "case_when"], "source": "synthetic", "difficulty": "medium"}}
{"id": "3bd05bbc-0991-4aa3-8a24-83099201188d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CAST(amount AS INTEGER) AS amount_int\nFROM events"}, "target": {"ibis": "events.mutate(amount_int=events.amount.cast('int64'))[[\"user_id\", \"amount\", \"amount_int\"]]", "expr_name": "expr"}, "meta": {"template": "type_casting", "variation": "cast_to_int", "features": ["cast", "type_conversion", "coalesce", "nullif"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8278ce2c-a480-4558-801c-01896a9036c6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CAST(user_id AS VARCHAR) AS user_id_str\nFROM events"}, "target": {"ibis": "events.mutate(user_id_str=events.user_id.cast('string'))[[\"user_id\", \"amount\", \"user_id_str\"]]", "expr_name": "expr"}, "meta": {"template": "type_casting", "variation": "cast_to_string", "features": ["cast", "type_conversion", "coalesce", "nullif"], "source": "synthetic", "difficulty": "easy"}}
{"id": "570f3ac1-ea7e-4a93-a038-b2ad0c7a81b2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CAST(user_id AS DOUBLE) AS user_id_float\nFROM events"}, "target": {"ibis": "events.mutate(user_id_float=events.user_id.cast('float64'))[[\"user_id\", \"amount\", \"user_id_float\"]]", "expr_name": "expr"}, "meta": {"template": "type_casting", "variation": "cast_to_float", "features": ["cast", "type_conversion", "coalesce", "nullif"], "source": "synthetic", "difficulty": "easy"}}
{"id": "01557f0e-fa21-40cc-a31a-6ca88e14e343", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, CAST(event_ts AS DATE) AS event_date\nFROM events"}, "target": {"ibis": "events.mutate(event_date=events.event_ts.cast('date'))[[\"user_id\", \"event_ts\", \"event_date\"]]", "expr_name": "expr"}, "meta": {"template": "type_casting", "variation": "cast_timestamp_to_date", "features": ["cast", "type_conversion", "coalesce", "nullif"], "source": "synthetic", "difficulty": "easy"}}
{"id": "3bfbf479-0475-4278-9f80-c6511db9501c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, COALESCE(amount, 0.0) AS amount_filled\nFROM events"}, "target": {"ibis": "events.mutate(amount_filled=ibis.coalesce(events.amount, 0.0))[[\"user_id\", \"amount\", \"amount_filled\"]]", "expr_name": "expr"}, "meta": {"template": "type_casting", "variation": "coalesce_values", "features": ["cast", "type_conversion", "coalesce", "nullif"], "source": "synthetic", "difficulty": "easy"}}
{"id": "74bcbe6f-9f68-425c-9ccc-f507e2b65fbb", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount + 10 AS amount_plus_ten\nFROM events"}, "target": {"ibis": "events.mutate(amount_plus_ten=(events.amount + 10))[[\"user_id\", \"amount\", \"amount_plus_ten\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "addition", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "7e10a729-e6be-41be-b887-2c8c315c6440", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount - 5 AS amount_minus_five\nFROM events"}, "target": {"ibis": "events.mutate(amount_minus_five=(events.amount - 5))[[\"user_id\", \"amount\", \"amount_minus_five\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "subtraction", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a1e45cb5-01a4-411b-9edf-0490dbbdbae6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount * 2 AS amount_doubled\nFROM events"}, "target": {"ibis": "events.mutate(amount_doubled=(events.amount * 2))[[\"user_id\", \"amount\", \"amount_doubled\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "multiplication", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9326dbfc-b013-4b0d-965b-b8fb859d52b7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount / 2 AS amount_halved\nFROM events"}, "target": {"ibis": "events.mutate(amount_halved=(events.amount / 2))[[\"user_id\", \"amount\", \"amount_halved\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "division", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "fc756fa8-da77-411e-80bc-1a460a949593", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CAST(amount AS INTEGER) % 3 AS amount_mod\nFROM events"}, "target": {"ibis": "events.mutate(amount_mod=(events.amount.cast('int64') % 3))[[\"user_id\", \"amount\", \"amount_mod\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "modulo", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "58f84252-ec75-4b5f-9830-482c9db03cfa", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, ABS(amount - 15) AS amount_diff\nFROM events"}, "target": {"ibis": "events.mutate(amount_diff=(events.amount - 15).abs())[[\"user_id\", \"amount\", \"amount_diff\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "absolute_value", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "41998283-722f-49ee-b372-ded36a901214", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, ROUND(amount, 0) AS amount_rounded\nFROM events"}, "target": {"ibis": "events.mutate(amount_rounded=events.amount.round(0))[[\"user_id\", \"amount\", \"amount_rounded\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "round_value", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "968652f8-503b-4cf2-bc1a-dc70b9249717", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, CEIL(amount) AS amount_ceil\nFROM events"}, "target": {"ibis": "events.mutate(amount_ceil=events.amount.ceil())[[\"user_id\", \"amount\", \"amount_ceil\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "ceiling", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a61db8eb-6371-4b5f-982c-ae49edfb4422", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, FLOOR(amount) AS amount_floor\nFROM events"}, "target": {"ibis": "events.mutate(amount_floor=events.amount.floor())[[\"user_id\", \"amount\", \"amount_floor\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "floor", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "c46d9522-7fb2-49c9-a49e-a77468a70f7b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, POWER(amount, 2) AS amount_squared\nFROM events"}, "target": {"ibis": "events.mutate(amount_squared=events.amount.pow(2))[[\"user_id\", \"amount\", \"amount_squared\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "power", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a9840d84-d0a8-4ea3-b71e-291b4607d044", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, SQRT(amount) AS amount_sqrt\nFROM events"}, "target": {"ibis": "events.mutate(amount_sqrt=events.amount.sqrt())[[\"user_id\", \"amount\", \"amount_sqrt\"]]", "expr_name": "expr"}, "meta": {"template": "numeric_operations", "variation": "square_root", "features": ["math", "arithmetic", "abs", "round", "ceil", "floor"], "source": "synthetic", "difficulty": "easy"}}
{"id": "accffcf2-882f-4c77-8e8a-ccc37ad81679", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount BETWEEN 10 AND 30"}, "target": {"ibis": "events.filter(events.amount.between(10, 30))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "between_clause", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8b8b31a8-0c10-4ea3-bfee-1e641420b6ac", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE user_id IN (1, 2, 3)"}, "target": {"ibis": "events.filter(events.user_id.isin([1, 2, 3]))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "in_list", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "53fb5938-5225-48b4-8285-8fd7d982d56a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE user_id NOT IN (1, 2)"}, "target": {"ibis": "events.filter(~events.user_id.isin([1, 2]))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "not_in_list", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2d3dc298-4c61-4815-a609-81d0843be145", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount IS NULL"}, "target": {"ibis": "events.filter(events.amount.isnull())[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "is_null", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "da5e589c-8c87-4b45-bdb1-d94edfd225b4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount IS NOT NULL"}, "target": {"ibis": "events.filter(events.amount.notnull())[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "is_not_null", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "46b6aa38-f257-4b58-8a68-2daa67ea9b03", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name LIKE 'A%'"}, "target": {"ibis": "users.filter(users.name.like('A%'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "like_pattern", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ba8dbc77-8c01-4688-8b11-fbebac708e8c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name NOT LIKE 'A%'"}, "target": {"ibis": "users.filter(~users.name.like('A%'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "not_like_pattern", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "66d4d853-6077-49eb-96f1-dbd252b99bc6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 5 OR amount > 25"}, "target": {"ibis": "events.filter((events.amount < 5) | (events.amount > 25))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "or_condition", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8d46667d-2e6a-4585-b982-1fc86d0e8fee", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE (amount > 10 AND user_id = 1) OR (amount < 5 AND user_id = 2)"}, "target": {"ibis": "events.filter(((events.amount > 10) & (events.user_id == 1)) | ((events.amount < 5) & (events.user_id == 2)))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "complex_and_or", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "90a5380a-9edb-4b4c-8503-3346bb2840f5", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE user_id != 1"}, "target": {"ibis": "events.filter(events.user_id != 1)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "not_equal", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "4d247d5d-faf0-4835-8725-098f0c83b207", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15"}, "target": {"ibis": "events.filter(events.amount >= 15)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "greater_than_equal", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "879f071e-2191-4eec-9f93-32b2ddb95a9d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 20"}, "target": {"ibis": "events.filter(events.amount <= 20)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "complex_filters", "variation": "less_than_equal", "features": ["filter", "where", "between", "in", "like", "is_null"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f27e343f-3417-43cf-b08f-be7a723d78e7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT *\nFROM events"}, "target": {"ibis": "events", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_all", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "0a7a1fc3-bd18-42fb-84cd-e7226f8139e3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_subset", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "851acfe7-6810-4f96-9cc0-bbc043f48229", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount AS amt\nFROM events"}, "target": {"ibis": "events.select(user_id=events.user_id, amt=events.amount)", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_with_alias", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "14faa4c4-3578-4fd3-a58b-087739be805b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id AS uid, amount AS amt, event_ts AS ts\nFROM events"}, "target": {"ibis": "events.select(uid=events.user_id, amt=events.amount, ts=events.event_ts)", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_multiple_aliases", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e4094d0b-4d30-4fb2-b31b-81718e026f9f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount * 2 AS double_amt\nFROM events"}, "target": {"ibis": "events.select(user_id=events.user_id, double_amt=events.amount * 2)", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_with_expression", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9b2bdc14-a28d-4b11-8100-c557efb21ffa", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts\nFROM events"}, "target": {"ibis": "events.drop(\"amount\")", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_exclude", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "44e28a5e-c1a2-4e56-bc8c-5210e6f758dc", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount + 10 AS amount_plus_ten\nFROM events"}, "target": {"ibis": "events.mutate(amount_plus_ten=events.amount + 10)[[\"user_id\", \"amount\", \"amount_plus_ten\"]]", "expr_name": "expr"}, "meta": {"template": "projection_operations", "variation": "select_computed", "features": ["select", "projection", "rename", "alias"], "source": "synthetic", "difficulty": "easy"}}
{"id": "b4eb2ac9-abcd-4d44-9302-c423b7ae60c5", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nORDER BY amount ASC"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].order_by(\"amount\")", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "order_by_asc", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "5925e0e6-dec8-4be6-8417-deebfe392838", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nORDER BY amount DESC"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].order_by(ibis.desc(\"amount\"))", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "order_by_desc", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "6dacaf76-334e-4616-99de-9f272f99979e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nORDER BY user_id ASC, event_ts DESC"}, "target": {"ibis": "events[[\"user_id\", \"event_ts\", \"amount\"]].order_by([\"user_id\", ibis.desc(\"event_ts\")])", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "order_by_multiple", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9dd90389-39ed-4207-9126-934c17db2ea1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nLIMIT 5"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].limit(5)", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "limit_only", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "7a2a9d81-e404-49ba-a6b7-45361424649b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nORDER BY amount DESC\nLIMIT 10"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].order_by(ibis.desc(\"amount\")).limit(10)", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "limit_with_order", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "12eaf0f8-492f-4928-8769-0cffea8697b9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nORDER BY amount\nLIMIT 5 OFFSET 10"}, "target": {"ibis": "events[[\"user_id\", \"amount\"]].order_by(\"amount\").limit(5, offset=10)", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "offset_with_limit", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "04d33939-4b76-4e2c-9a4e-2dfc09456917", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE user_id = 1\nORDER BY amount DESC\nLIMIT 3"}, "target": {"ibis": "events.filter(events.user_id == 1)[[\"user_id\", \"amount\"]].order_by(ibis.desc(\"amount\")).limit(3)", "expr_name": "expr"}, "meta": {"template": "sorting_limiting", "variation": "top_n_by_group", "features": ["order_by", "limit", "offset", "sort"], "source": "synthetic", "difficulty": "easy"}}
{"id": "f056ba37-297b-48c4-9fdc-7d5852df2152", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, l.label, COUNT(*) AS n, SUM(e.amount) AS total\nFROM events e\nINNER JOIN labels l ON e.user_id = l.user_id\nGROUP BY e.user_id, l.label"}, "target": {"ibis": "events.join(labels, events.user_id == labels.user_id, how=\"inner\").group_by(\n    [\"user_id\", \"label\"]\n).aggregate(\n    n=ibis._.count(),\n    total=events.amount.sum()\n)", "expr_name": "expr"}, "meta": {"template": "join_aggregation", "variation": "join_then_aggregate", "features": ["join", "aggregate", "groupby"], "source": "synthetic", "difficulty": "hard"}}
{"id": "720d5698-93cc-46bd-9a55-e14ddf707369", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT u.user_id, u.name, COUNT(e.user_id) AS event_count\nFROM users u\nLEFT JOIN events e ON u.user_id = e.user_id\nGROUP BY u.user_id, u.name"}, "target": {"ibis": "users.left_join(events, users.user_id == events.user_id).group_by(\n    [users.user_id, users.name]\n).aggregate(\n    event_count=events.user_id.count()\n)", "expr_name": "expr"}, "meta": {"template": "join_aggregation", "variation": "left_join_with_count", "features": ["join", "aggregate", "groupby"], "source": "synthetic", "difficulty": "hard"}}
{"id": "c1513bc6-686e-43fd-9412-0ff21697e734", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}, "labels": {"schema": {"user_id": "int64", "label": "int8"}}}}, "input": {"sql": "SELECT e.user_id, COUNT(*) AS high_amount_events\nFROM events e\nINNER JOIN labels l ON e.user_id = l.user_id\nWHERE e.amount > 10 AND l.label = 1\nGROUP BY e.user_id"}, "target": {"ibis": "events.join(\n    labels, events.user_id == labels.user_id, how=\"inner\"\n).filter(\n    (events.amount > 10) & (labels.label == 1)\n).group_by(\"user_id\").aggregate(\n    high_amount_events=ibis._.count()\n)", "expr_name": "expr"}, "meta": {"template": "join_aggregation", "variation": "join_filter_aggregate", "features": ["join", "aggregate", "groupby"], "source": "synthetic", "difficulty": "hard"}}
{"id": "5ad1fb85-ff05-42c3-acfb-1a47e184e55c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(n=events.count())", "expr_name": "expr"}, "meta": {"template": "groupby_variations", "variation": "group_by_single_key", "features": ["groupby", "aggregate", "multi_column"], "source": "synthetic", "difficulty": "medium"}}
{"id": "613c6f33-8e4a-4164-a32f-35f5969fe09a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT CAST(amount AS INTEGER) AS amount_bucket, COUNT(*) AS n\nFROM events\nGROUP BY CAST(amount AS INTEGER)"}, "target": {"ibis": "events.group_by(\n    amount_bucket=events.amount.cast('int64')\n).aggregate(\n    n=ibis._.count()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_variations", "variation": "group_by_expression", "features": ["groupby", "aggregate", "multi_column"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f1b15165-e7a5-49b0-9c91-589993c69f67", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n, SUM(amount) AS total, AVG(amount) AS avg_amt, MIN(amount) AS min_amt, MAX(amount) AS max_amt\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    n=events.count(),\n    total=events.amount.sum(),\n    avg_amt=events.amount.mean(),\n    min_amt=events.amount.min(),\n    max_amt=events.amount.max()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_variations", "variation": "group_by_with_multiple_aggs", "features": ["groupby", "aggregate", "multi_column"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f8fcf301-4c7c-427e-989b-b4020718079e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(DISTINCT CAST(event_ts AS DATE)) AS distinct_days\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    distinct_days=events.event_ts.date().nunique()\n)", "expr_name": "expr"}, "meta": {"template": "groupby_variations", "variation": "group_by_with_distinct_count", "features": ["groupby", "aggregate", "multi_column"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8cf539a5-40c6-45f4-950b-f0d70c24dcf2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name LIKE 'A%'"}, "target": {"ibis": "users.filter(users.name.startswith('A'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "starts_with", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d307885e-4faa-488a-a127-39f2de058109", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name LIKE '%e'"}, "target": {"ibis": "users.filter(users.name.endswith('e'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "ends_with", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f48c54e0-ad8c-4d68-819b-8304258d7fdf", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name LIKE '%li%'"}, "target": {"ibis": "users.filter(users.name.contains('li'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "contains_pattern", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2270cca0-37ca-4674-b026-f27162a3d297", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE LOWER(name) LIKE 'a%'"}, "target": {"ibis": "users.filter(users.name.lower().startswith('a'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "case_insensitive_like", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8fe4d7aa-e626-4b29-b492-65d76a4d8310", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name LIKE 'A%' OR name LIKE 'B%'"}, "target": {"ibis": "users.filter(users.name.startswith('A') | users.name.startswith('B'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "multiple_like_or", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2cd6798a-5d07-4a01-802e-2f53bf1d8e1b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, name\nFROM users\nWHERE name NOT LIKE '%test%'"}, "target": {"ibis": "users.filter(~users.name.contains('test'))[[\"user_id\", \"name\"]]", "expr_name": "expr"}, "meta": {"template": "string_patterns", "variation": "not_contains", "features": ["string", "like", "regex", "contains", "startswith", "endswith"], "source": "synthetic", "difficulty": "medium"}}
{"id": "98bf4af6-0b08-4b03-b439-64a4f0e96ad8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount, amount * 2 AS doubled\nFROM events\nWHERE amount > 10"}, "target": {"ibis": "events.filter(events.amount > 10).mutate(\n    doubled=events.amount * 2\n)[[\"user_id\", \"amount\", \"doubled\"]]", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "filter_mutate_select", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "dcb970ec-382a-4472-9069-6ec4ab12138b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT e.user_id, e.amount, u.name, e.amount * 1.1 AS amount_with_tax\nFROM events e\nINNER JOIN users u ON e.user_id = u.user_id\nWHERE e.amount > 15"}, "target": {"ibis": "events.join(\n    users, events.user_id == users.user_id, how=\"inner\"\n).filter(\n    events.amount > 15\n).mutate(\n    amount_with_tax=events.amount * 1.1\n)[[\"user_id\", \"amount\", \"name\", \"amount_with_tax\"]]", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "join_filter_mutate", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "37716742-7035-4828-9fdd-d2d2282d1fd2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount, ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY amount) AS row_num\nFROM events\nWHERE amount > 5"}, "target": {"ibis": "events.filter(events.amount > 5).mutate(\n    row_num=(ibis.row_number().over(\n        ibis.window(group_by=\"user_id\", order_by=\"amount\")\n    ) + 1)\n)[[\"user_id\", \"amount\", \"row_num\"]]", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "filter_window_select", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "e8542f6a-5bb3-46ff-9269-de1d633b6d77", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS n, SUM(amount) AS total\nFROM events\nGROUP BY user_id\nHAVING COUNT(*) > 1"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    n=events.count(),\n    total=events.amount.sum()\n).filter(ibis._.n > 1)", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "aggregate_with_having", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "cc50ed0f-a865-42d7-a40c-1eda9aaa49ac", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS avg_amt\nFROM events\nWHERE amount > 5\nGROUP BY user_id\nHAVING AVG(amount) > 15\nORDER BY avg_amt DESC"}, "target": {"ibis": "events.filter(\n    events.amount > 5\n).group_by(\"user_id\").aggregate(\n    avg_amt=events.amount.mean()\n).filter(\n    ibis._.avg_amt > 15\n).order_by(ibis.desc(\"avg_amt\"))", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "where_groupby_having_order", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "18fcce3c-3acd-4e02-9e30-93b13ae004a0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}, "users": {"schema": {"user_id": "int64", "name": "string"}}}}, "input": {"sql": "SELECT user_id, amount, amount * 2 AS doubled, amount * 2 + 10 AS doubled_plus_ten\nFROM events"}, "target": {"ibis": "events.mutate(\n    doubled=events.amount * 2\n).mutate(\n    doubled_plus_ten=ibis._.doubled + 10\n)[[\"user_id\", \"amount\", \"doubled\", \"doubled_plus_ten\"]]", "expr_name": "expr"}, "meta": {"template": "mixed_operations", "variation": "multiple_mutate_chain", "features": ["filter", "aggregate", "window", "mutate", "join"], "source": "synthetic", "difficulty": "hard"}}
{"id": "986d8996-d315-48aa-94e9-5867dd854be1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE CAST(event_ts AS DATE) = '2024-01-01'"}, "target": {"ibis": "events.filter(events.event_ts.date() == '2024-01-01')[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "date_equals", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "9e1f46ec-36de-4e3d-aef3-33e99c315285", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE event_ts >= '2024-01-02'"}, "target": {"ibis": "events.filter(events.event_ts >= '2024-01-02')[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "date_greater_than", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d7936ba8-ebe2-46a5-bcb7-3afbba8d45b3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE event_ts < '2024-01-03'"}, "target": {"ibis": "events.filter(events.event_ts < '2024-01-03')[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "date_less_than", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "00b93202-a05c-45ff-82a8-955e318bdbf2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE event_ts BETWEEN '2024-01-01' AND '2024-01-03'"}, "target": {"ibis": "events.filter(events.event_ts.between('2024-01-01', '2024-01-03'))[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "date_between", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0188519f-9b5c-405c-bd18-559565ad7450", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE EXTRACT(YEAR FROM event_ts) = 2024"}, "target": {"ibis": "events.filter(events.event_ts.year() == 2024)[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "year_filter", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "6b521b43-80b8-4c40-bcda-372f6bc21823", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE EXTRACT(MONTH FROM event_ts) = 1"}, "target": {"ibis": "events.filter(events.event_ts.month() == 1)[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "month_filter", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "9a213e9e-f384-42e8-a130-c4e9033c8ee4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount\nFROM events\nWHERE EXTRACT(DAY FROM event_ts) IN (1, 2)"}, "target": {"ibis": "events.filter(events.event_ts.day().isin([1, 2]))[[\"user_id\", \"event_ts\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "temporal_filters", "variation": "day_filter", "features": ["temporal", "filter", "date_comparison"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8d8c26aa-1265-4021-a48c-be32c519ef15", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(*) AS total_count\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(total_count=events.count())", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "count_star", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "48939c74-adb6-48ad-a6cf-ffe48b1077d3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COUNT(amount) AS amount_count\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(amount_count=events.amount.count())", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "count_column", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "78ea2797-4400-4a2b-a1ff-5b590d2eac77", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COALESCE(SUM(amount), 0) AS total\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(total=ibis.coalesce(events.amount.sum(), 0))", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "sum_null_handling", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a9852dff-7173-4ea4-a4af-9ebeef5a5880", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, COALESCE(AVG(amount), 0.0) AS avg_amt\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(avg_amt=ibis.coalesce(events.amount.mean(), 0.0))", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "avg_null_handling", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d18ff4d9-afa4-47ca-a091-1d813f8aaeb6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS min_val, MAX(amount) AS max_val, MAX(amount) - MIN(amount) AS range_val\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    min_val=events.amount.min(),\n    max_val=events.amount.max()\n).mutate(\n    range_val=ibis._.max_val - ibis._.min_val\n)", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "min_max_together", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8580289f-e609-4157-ab8e-803d8c022817", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(event_ts) AS first_event, MAX(event_ts) AS last_event\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(\n    first_event=events.event_ts.min(),\n    last_event=events.event_ts.max()\n)", "expr_name": "expr"}, "meta": {"template": "aggregation_edge_cases", "variation": "first_last_values", "features": ["aggregate", "groupby", "edge_cases"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ab65b900-5dac-46b9-a2ca-c382dad0c1da", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount * 1.1 AS amount_taxed, CAST(user_id AS VARCHAR) AS user_id_str\nFROM events"}, "target": {"ibis": "events.mutate(amount_taxed=events.amount * 1.1,\n    user_id_str=events.user_id.cast('string')\n)[[\"user_id\", \"amount\", \"amount_taxed\", \"user_id_str\"]]", "expr_name": "expr"}, "meta": {"template": "expression_combinations", "variation": "math_and_string", "features": ["mutate", "expression", "computed_columns"], "source": "synthetic", "difficulty": "medium"}}
{"id": "96f8919f-8167-49d5-91b3-210e6aec033f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, amount, EXTRACT(YEAR FROM event_ts) AS year, ROUND(amount, 1) AS amount_rounded\nFROM events"}, "target": {"ibis": "events.mutate(year=events.event_ts.year(),\n    amount_rounded=events.amount.round(1)\n)[[\"user_id\", \"event_ts\", \"amount\", \"year\", \"amount_rounded\"]]", "expr_name": "expr"}, "meta": {"template": "expression_combinations", "variation": "temporal_and_numeric", "features": ["mutate", "expression", "computed_columns"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e6b73764-b01a-48cc-bf4b-9a150a2440a6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(YEAR FROM event_ts) AS year, EXTRACT(MONTH FROM event_ts) AS month, EXTRACT(DAY FROM event_ts) AS day\nFROM events"}, "target": {"ibis": "events.mutate(year=events.event_ts.year(),\n    month=events.event_ts.month(),\n    day=events.event_ts.day()\n)[[\"user_id\", \"event_ts\", \"year\", \"month\", \"day\"]]", "expr_name": "expr"}, "meta": {"template": "expression_combinations", "variation": "multiple_temporal_extracts", "features": ["mutate", "expression", "computed_columns"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f13ea93c-b1f1-4b3d-afda-b3c26eab4e19", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, amount * 2 AS doubled, (amount * 2) + 5 AS doubled_plus_five, ((amount * 2) + 5) / 10 AS final\nFROM events"}, "target": {"ibis": "events.mutate(doubled=events.amount * 2,\n    doubled_plus_five=(events.amount * 2) + 5,\n    final=((events.amount * 2) + 5) / 10\n)[[\"user_id\", \"amount\", \"doubled\", \"doubled_plus_five\", \"final\"]]", "expr_name": "expr"}, "meta": {"template": "expression_combinations", "variation": "chained_math", "features": ["mutate", "expression", "computed_columns"], "source": "synthetic", "difficulty": "medium"}}
{"id": "32cd64c0-5bf6-4585-be43-1366623b5394", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 5"}, "target": {"ibis": "events.filter(events.amount > 5)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "c8b678da-005a-4388-bc18-f24f5b86f1a6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10"}, "target": {"ibis": "events.filter(events.amount > 10)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "0cc45cfa-c445-4849-8006-a2d9adedae44", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15"}, "target": {"ibis": "events.filter(events.amount > 15)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "c946a6a4-ce16-4bcf-a772-fe27619755d0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20"}, "target": {"ibis": "events.filter(events.amount > 20)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "2a3dbdfd-ac57-4afe-9e76-efa61a36bedc", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 25"}, "target": {"ibis": "events.filter(events.amount > 25)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "2fc81628-b786-4636-ada0-400da1a4f10b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 5"}, "target": {"ibis": "events.filter(events.amount < 5)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_25", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "fb3207b8-f983-42dc-b7c1-3cc6076f3715", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10"}, "target": {"ibis": "events.filter(events.amount < 10)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_26", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e8404d6e-76f9-4a77-b410-0c1e8a443a5f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15"}, "target": {"ibis": "events.filter(events.amount < 15)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_27", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "32e68365-16ed-4d02-90be-f7bbd67db7d5", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20"}, "target": {"ibis": "events.filter(events.amount < 20)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_28", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "270fe6f5-557d-43dd-b600-313c889a0a36", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 25"}, "target": {"ibis": "events.filter(events.amount < 25)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_29", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "fb994a6f-da25-4c0a-b5ad-6b19908b9d9f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 5"}, "target": {"ibis": "events.filter(events.amount >= 5)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_50", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "7c1f5e3c-77d4-4b4e-8883-630c6878fcda", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10"}, "target": {"ibis": "events.filter(events.amount >= 10)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_51", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "92cedf7b-5736-4d6f-93f6-af23021a8277", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15"}, "target": {"ibis": "events.filter(events.amount >= 15)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_52", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "6a583f71-9d02-45e5-9660-9f8f860781ed", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20"}, "target": {"ibis": "events.filter(events.amount >= 20)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_53", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8f1f5924-73df-4813-8c6c-52b6612dde49", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 25"}, "target": {"ibis": "events.filter(events.amount >= 25)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_54", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "50e1c922-59e1-4639-8457-c77284cd204d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 5"}, "target": {"ibis": "events.filter(events.amount <= 5)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_75", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "6cf29eea-fdcc-4a9c-a786-a10ba9d23a35", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 10"}, "target": {"ibis": "events.filter(events.amount <= 10)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_76", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8ee39a11-00ff-4e73-9910-2e9d39104539", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 15"}, "target": {"ibis": "events.filter(events.amount <= 15)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_77", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8e3c4293-93ff-4b7c-abc7-00ab362ca40c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 20"}, "target": {"ibis": "events.filter(events.amount <= 20)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_78", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9956ff0b-373b-435c-a663-0a88c79a2e50", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount <= 25"}, "target": {"ibis": "events.filter(events.amount <= 25)[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_filters", "variation": "numeric_filter_79", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "2919ad1d-a1f7-49cf-b34f-b9f89cfb2a8e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS agg_result\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(agg_result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_aggregations", "variation": "sum_agg", "features": ["aggregate", "groupby", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "1f5fafa0-36b3-4f67-992f-856a8a134f8e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS agg_result\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(agg_result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_aggregations", "variation": "avg_agg", "features": ["aggregate", "groupby", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "0f33a693-29d0-4e92-bb52-d393cd6aaac5", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS agg_result\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(agg_result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_aggregations", "variation": "min_agg", "features": ["aggregate", "groupby", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "870c44a0-f91e-443f-98fe-e2b0f86a3966", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS agg_result\nFROM events\nGROUP BY user_id"}, "target": {"ibis": "events.group_by(\"user_id\").aggregate(agg_result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_aggregations", "variation": "max_agg", "features": ["aggregate", "groupby", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "550bd8c7-172c-4ed0-bbfe-a34bb6c54f60", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(YEAR FROM event_ts) AS extracted\nFROM events"}, "target": {"ibis": "events.mutate(extracted=events.event_ts.year())[[\"user_id\", \"event_ts\", \"extracted\"]]", "expr_name": "expr"}, "meta": {"template": "param_temporal", "variation": "extract_year", "features": ["temporal", "extract", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "27e70be7-ed1d-40ae-a0e3-6fba08c35227", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(MONTH FROM event_ts) AS extracted\nFROM events"}, "target": {"ibis": "events.mutate(extracted=events.event_ts.month())[[\"user_id\", \"event_ts\", \"extracted\"]]", "expr_name": "expr"}, "meta": {"template": "param_temporal", "variation": "extract_month", "features": ["temporal", "extract", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "b20d36cb-e4e4-48dd-815d-6353be0dd176", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(DAY FROM event_ts) AS extracted\nFROM events"}, "target": {"ibis": "events.mutate(extracted=events.event_ts.day())[[\"user_id\", \"event_ts\", \"extracted\"]]", "expr_name": "expr"}, "meta": {"template": "param_temporal", "variation": "extract_day", "features": ["temporal", "extract", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a01b77f3-5c1d-4459-a885-75558d096dcc", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(QUARTER FROM event_ts) AS extracted\nFROM events"}, "target": {"ibis": "events.mutate(extracted=events.event_ts.quarter())[[\"user_id\", \"event_ts\", \"extracted\"]]", "expr_name": "expr"}, "meta": {"template": "param_temporal", "variation": "extract_quarter", "features": ["temporal", "extract", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "46068171-a9bc-4558-a6e2-6130cd497586", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, event_ts, EXTRACT(HOUR FROM event_ts) AS extracted\nFROM events"}, "target": {"ibis": "events.mutate(extracted=events.event_ts.hour())[[\"user_id\", \"event_ts\", \"extracted\"]]", "expr_name": "expr"}, "meta": {"template": "param_temporal", "variation": "extract_hour", "features": ["temporal", "extract", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "337bb1cb-ed46-4e66-b6ae-5041898034b4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_0", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a2eac840-077b-4d0f-9fdf-91465b045a7f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_1", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "eb4e888f-1f50-4057-8cce-a3747e0e2ee8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_2", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "4fbb51c4-13d0-4c0f-a622-dfec42343172", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_9", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e9bd1faa-37af-4f7c-954d-1a47c75ba3bd", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_10", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "6ee41ebc-f501-4979-8414-c51e9bd26d96", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_11", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d2aaaa92-45f4-41b0-b693-a3fc31721087", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_12", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "49726316-f31c-476d-8e9b-28e841393735", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_13", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "61c2f052-2063-48b4-9681-9de5b8dbc4b9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_14", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "7f5a3102-109f-473f-b621-9f4c771befeb", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_21", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a182f121-cad9-4ae3-830d-43c0ef36b8b7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_22", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a040cc45-3da6-4d72-bbdd-46e5e0aa75f8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_23", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a097afbc-0ad2-4113-bcac-7c6f16f8d73b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_24", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "2b4109f6-5d0b-4ad0-b1ed-5fdc741d55b3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_25", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "398e1488-0b82-4c01-b835-22c6fb6ded7d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_26", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "c91d353b-758a-4fee-bab5-97190bc948bf", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_33", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0818bd61-9307-4792-a153-8876355dc9ff", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_34", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "45a72ab0-9012-4a3f-99c8-ed388642f114", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_35", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b7feb48a-950f-49e3-a2ab-79850eb72f83", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_51", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "12112fcd-3276-4663-b276-3b48085d1504", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_63", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "1f57ecf1-11bf-4619-ab6d-cc7298f1f86d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_73", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "0c354ea1-b613-40d7-bee0-b404c0852ec9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_74", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e8c9c7ef-3872-4ffe-81fb-1c32135f1e3d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 10 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_81", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "02c9b1ac-cf9c-47ce-bef9-e2c284d0dc3d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_85", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f139a120-da70-4df6-8af2-6201b61447cc", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_86", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "8603c94f-8cdc-4bf6-8ae5-7538ff3586c3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_93", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "74c8541c-0151-4c67-aeb6-497b7f13db04", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_96", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "97e02b22-2611-4099-84b6-d867535bb40a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_98", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5fb19425-b709-4005-a2dd-43508cdb900a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount > 20 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_106", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "bd6bcc5b-5156-4ed6-b115-cfd4b78bedd7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_126", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "1423a578-fe86-45ab-ab78-b19e4da9e397", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_138", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e6cbfdb7-1180-4e76-8897-787dc09b1566", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_144", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "26b7623d-25ea-4daf-a840-0057f3c74522", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_145", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5d422a31-82ed-4740-b017-7f7f6fa4de70", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_146", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "7d0c8fe3-45ec-4faf-a3c6-7e518177750d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_153", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "30df0cab-0d98-4522-bc39-10689d9d18b7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_154", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "189aaf4d-e001-4236-9e6d-d1ca7629d7d6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 10 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount < 10) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_155", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e039a38e-bae4-4152-a7a3-f011b4f4f471", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_156", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "64496273-dfdf-4821-9cc3-fbc9eff364a2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_157", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "98b56161-fe42-428a-8622-e40aac9fe302", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_158", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "adb5591a-fabd-4e9a-94a4-a1e53486acc7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_165", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f0484877-45a5-49ba-a5b1-2c2f5d9f464f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_166", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "fd0bbce5-83fd-4121-9290-abf51ee0ef94", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 15 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount < 15) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_167", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "33268c28-6668-43c8-9e20-418edc86ddb4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_168", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "99512f34-4550-41b4-8fdc-8823fc49d399", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_169", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "7dc45399-ffd4-4588-8d60-4f80b740f93c", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_170", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f0663404-6f16-47a8-8e3b-5fccf35170ec", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_177", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "650923f9-c153-4643-bf44-0fa72f57ffdf", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_178", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "09e7c183-b3b6-4ad2-8e96-25d22d1e17c7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_179", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "46875174-c349-43f6-8349-e05ae30b99b4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount < 20 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_210", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d7622054-d456-4705-9242-b8f1eb906db0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_217", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a7956ab7-8499-40da-8d65-440f03eea485", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_218", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "a0ce313a-4c9f-4bfa-a880-9673f22af405", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 10) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_225", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "20851ddd-ee59-4b91-bba0-077be5c89318", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_229", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "9046b7eb-877d-4202-99f2-a6e4732743da", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_230", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "fb4b7d34-935d-4f8b-99a6-9418191f5197", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount > 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_237", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ffccbe8c-c116-44d8-9ad8-3b01bf3c2459", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_240", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5ef7f5f2-a02b-4348-b066-9505f8499543", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_242", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "871e5bb3-dc9e-4897-8cc6-9dae5d3c4da1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount > 20) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_250", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "dc859c42-edf0-4d19-9ecd-b4addcefb167", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount < 20) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_279", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "aae7b6af-321f-4dd2-8b49-6b619fc2abf8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_288", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "db3e22d7-259b-40d4-b82d-42b0991724ae", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_289", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f5832b9c-f6fe-44ea-b041-7eb0d4e859da", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_290", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "315ad261-e871-490b-a362-e583a1efa82e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_297", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "777e1d4b-6f8a-4e93-8e43-c7ba976264d4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_298", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "942e2680-d0dc-4ba1-bc8e-70556ed41e4e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 10 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount >= 10) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_299", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e55eac55-eb8f-4f62-aca5-84beef6d0015", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_300", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "56ff45e5-7e35-447c-bc69-fcc8e8b64f2b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_301", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f8170e8d-7902-4a76-9c14-4755bc26f9cf", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_302", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5848cdf4-2af0-4a9b-af7d-bea2cca101e2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_309", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b5f1f3e8-6a5b-4240-99bd-c828d419c767", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_310", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d4c6b8bf-1bdb-4426-8efe-d21688eb3dc9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 15 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount >= 15) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_311", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "4c95a870-d01c-4a12-b5ab-f9d7d985d62a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 1"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_312", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "141095de-c7af-4a30-806c-f52537e19ac2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 2"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_313", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f1bc212d-c7bb-4d9e-9817-9dfd563188d2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id == 3"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id == 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_314", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b9a15ba8-30fb-4738-af39-472697af0585", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id != 1"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id != 1))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_321", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d2c4c909-4d79-4b89-9e2d-8d4055de307b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id != 2"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id != 2))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_322", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "d2e0a10b-824b-47dc-8f85-b7211c4eb6e9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount\nFROM events\nWHERE amount >= 20 AND user_id != 3"}, "target": {"ibis": "events.filter((events.amount >= 20) & (events.user_id != 3))[[\"user_id\", \"amount\"]]", "expr_name": "expr"}, "meta": {"template": "param_multi_filter", "variation": "compound_filter_323", "features": ["filter", "where", "compound", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "eac6c5be-b99b-4de4-9b7a-b65d3b77800d", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 5"}, "target": {"ibis": "events.filter(events.amount > 5)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "5661aa88-6fd5-4101-8e81-d150e56cf4c1", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 8"}, "target": {"ibis": "events.filter(events.amount > 8)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "d9c49cf9-41b2-4673-bb9f-c91b179c6b72", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 10"}, "target": {"ibis": "events.filter(events.amount > 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "50a0d8de-cd79-4503-8f52-5b289f17db36", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 12"}, "target": {"ibis": "events.filter(events.amount > 12)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8caa1f36-c54b-438a-ab01-fed8684f9a44", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 15"}, "target": {"ibis": "events.filter(events.amount > 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "dfd44761-f6e2-495b-a18d-c34285038335", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 18"}, "target": {"ibis": "events.filter(events.amount > 18)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_5", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8bdccec6-cf03-4f9e-8787-239494f62a9b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 20"}, "target": {"ibis": "events.filter(events.amount > 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_6", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "c4d7701d-c16e-4497-8b94-c1db37c4c662", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 22"}, "target": {"ibis": "events.filter(events.amount > 22)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_7", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "139614b6-3473-4b78-8694-5a3cad31bf68", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 25"}, "target": {"ibis": "events.filter(events.amount > 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_8", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "f149938d-e6cd-482f-8c51-d98386a1bd58", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 28"}, "target": {"ibis": "events.filter(events.amount > 28)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_9", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "2b0e194b-c995-4526-a4a7-7d4060dc5f48", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount > 30"}, "target": {"ibis": "events.filter(events.amount > 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gt_filter_10", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e84e5e7d-67fe-4ee5-9585-9ee4ef4a9b35", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 5"}, "target": {"ibis": "events.filter(events.amount < 5)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a622a56c-c9b1-4262-858c-89163e4c6640", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 8"}, "target": {"ibis": "events.filter(events.amount < 8)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9b256125-a587-4c36-91bf-677df5228612", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 10"}, "target": {"ibis": "events.filter(events.amount < 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "40cc026b-237f-4549-b53a-56a448bfd793", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 12"}, "target": {"ibis": "events.filter(events.amount < 12)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "717843e9-6246-4b47-9c80-d07e805a74ec", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 15"}, "target": {"ibis": "events.filter(events.amount < 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "909169a6-f31f-43c7-9940-a641f72f1aab", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 18"}, "target": {"ibis": "events.filter(events.amount < 18)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_5", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "d51e0e25-dae1-4004-b596-44e8d91978b6", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 20"}, "target": {"ibis": "events.filter(events.amount < 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_6", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "2b5acd57-7fc6-4db9-b763-f5a2a7615544", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 22"}, "target": {"ibis": "events.filter(events.amount < 22)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_7", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "7234a695-a3f7-4489-ad56-99eae9803023", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 25"}, "target": {"ibis": "events.filter(events.amount < 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_8", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "00d9d476-e7d5-4dec-bee6-062051e29f53", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 28"}, "target": {"ibis": "events.filter(events.amount < 28)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_9", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9200a043-9b0b-44b9-86f4-154a73ce73e0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount < 30"}, "target": {"ibis": "events.filter(events.amount < 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lt_filter_10", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e323ec41-5fb9-461c-8920-c7b3bfa7307b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 5"}, "target": {"ibis": "events.filter(events.amount >= 5)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "12d5e514-3572-4e33-8436-063527e53d7e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 8"}, "target": {"ibis": "events.filter(events.amount >= 8)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "20b6848e-0592-4f17-a157-4de7683b86f0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 10"}, "target": {"ibis": "events.filter(events.amount >= 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "4c86c953-c41e-4577-9efc-f0c80596e268", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 12"}, "target": {"ibis": "events.filter(events.amount >= 12)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "b574a26d-cd14-460d-89a5-4ade4cf398f3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 15"}, "target": {"ibis": "events.filter(events.amount >= 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9e01fb31-bf43-46cc-bce4-e03508acd12b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 18"}, "target": {"ibis": "events.filter(events.amount >= 18)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_5", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a709760a-5bb4-4d1e-97e2-2982e1b0b555", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 20"}, "target": {"ibis": "events.filter(events.amount >= 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_6", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "6077a953-c0bc-488e-9179-db13b13ebc7b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 22"}, "target": {"ibis": "events.filter(events.amount >= 22)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_7", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "115363c8-7352-4aac-b1f5-49a7a2278d61", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 25"}, "target": {"ibis": "events.filter(events.amount >= 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_8", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8fa2442b-6f65-4b58-8f54-0490e3ee78b7", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 28"}, "target": {"ibis": "events.filter(events.amount >= 28)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_9", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e6802ebe-bc3a-4b81-9cbf-ebe7f19c81c2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount >= 30"}, "target": {"ibis": "events.filter(events.amount >= 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "gte_filter_10", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "8b03b713-d774-4b2d-82fa-85619faac102", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 5"}, "target": {"ibis": "events.filter(events.amount <= 5)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "682f1755-7237-4ae4-ae28-12fe44a99030", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 8"}, "target": {"ibis": "events.filter(events.amount <= 8)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "d3775411-e078-4eac-bac5-0e472a61815e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 10"}, "target": {"ibis": "events.filter(events.amount <= 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e305d2cf-84be-4988-8955-eaf96e89cb20", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 12"}, "target": {"ibis": "events.filter(events.amount <= 12)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "ff0a30f2-f418-4827-bbec-a8190e61e665", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 15"}, "target": {"ibis": "events.filter(events.amount <= 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e260f387-0e31-41e9-a4f5-fbe8acb9c34a", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 18"}, "target": {"ibis": "events.filter(events.amount <= 18)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_5", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "9c885002-a4a3-436c-9d5e-9463410ef6d8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 20"}, "target": {"ibis": "events.filter(events.amount <= 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_6", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "5fd58790-183f-40f2-bbd3-bfaf300601da", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 22"}, "target": {"ibis": "events.filter(events.amount <= 22)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_7", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "db5f6242-fb7e-4f5a-a011-a875bc4b82d3", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 25"}, "target": {"ibis": "events.filter(events.amount <= 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_8", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "32b3dc18-e6f7-440f-8fb7-c92c40d87b5b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 28"}, "target": {"ibis": "events.filter(events.amount <= 28)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_9", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "dd1d51fa-26ad-4410-b2da-e925fe7d0231", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount <= 30"}, "target": {"ibis": "events.filter(events.amount <= 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "lte_filter_10", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "069b3a20-801c-4093-82b7-164716972bba", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount = 10"}, "target": {"ibis": "events.filter(events.amount == 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "eq_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "4a571d0e-9f7c-4480-98d3-529b5b2d0859", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount = 15"}, "target": {"ibis": "events.filter(events.amount == 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "eq_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e537d4d9-1a24-4195-a51b-c7bb65582f50", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount = 20"}, "target": {"ibis": "events.filter(events.amount == 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "eq_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "3e8ee23c-981a-4085-b08f-2c1add83d425", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount = 25"}, "target": {"ibis": "events.filter(events.amount == 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "eq_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "50645435-71a3-4f68-8521-f3a9eb45794b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount = 30"}, "target": {"ibis": "events.filter(events.amount == 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "eq_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "cc9edb53-ae3f-465a-a24c-3100cf20b089", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount != 10"}, "target": {"ibis": "events.filter(events.amount != 10)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "neq_filter_0", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "69d13eb2-ab91-4f2b-80b4-646f8517ad03", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount != 15"}, "target": {"ibis": "events.filter(events.amount != 15)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "neq_filter_1", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "a1c8fffd-b063-4eb5-a942-71cde97ff721", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount != 20"}, "target": {"ibis": "events.filter(events.amount != 20)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "neq_filter_2", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "bebe98f5-7e60-43bb-ae3c-27e7abcd800e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount != 25"}, "target": {"ibis": "events.filter(events.amount != 25)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "neq_filter_3", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "b21694c0-d5ff-4584-beec-eb50717eaf94", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, amount, event_ts\nFROM events\nWHERE amount != 30"}, "target": {"ibis": "events.filter(events.amount != 30)[[\"user_id\", \"amount\", \"event_ts\"]]", "expr_name": "expr"}, "meta": {"template": "param_filter_combinations", "variation": "neq_filter_4", "features": ["filter", "where", "parameterized"], "source": "synthetic", "difficulty": "easy"}}
{"id": "e3cc37a8-5bf0-40cc-a0a0-d4db6ef55df9", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS result\nFROM events\nWHERE amount > 5\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 5).group_by(\"user_id\").aggregate(result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "sum_with_filter_0", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "1b008b07-b6e0-44e8-851d-7cf2856fcc57", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS result\nFROM events\nWHERE amount > 10\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 10).group_by(\"user_id\").aggregate(result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "sum_with_filter_1", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "5c144c41-c71d-416c-b514-b82817616ead", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS result\nFROM events\nWHERE amount > 15\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 15).group_by(\"user_id\").aggregate(result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "sum_with_filter_2", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "87d4cf66-2685-4243-b5f9-b161ce9754e4", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS result\nFROM events\nWHERE amount > 20\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 20).group_by(\"user_id\").aggregate(result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "sum_with_filter_3", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "f7514160-7986-45c0-a2c3-738ffd6f7b06", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, SUM(amount) AS result\nFROM events\nWHERE amount > 25\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 25).group_by(\"user_id\").aggregate(result=events.amount.sum())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "sum_with_filter_4", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "3ea97228-3983-4f22-9bba-a6c36220faa2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS result\nFROM events\nWHERE amount > 5\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 5).group_by(\"user_id\").aggregate(result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "avg_with_filter_0", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "ff4e4677-2aa8-463a-be1e-c816e049ab72", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS result\nFROM events\nWHERE amount > 10\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 10).group_by(\"user_id\").aggregate(result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "avg_with_filter_1", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "c0bea910-1a12-4e08-9248-bd9bcc6becd0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS result\nFROM events\nWHERE amount > 15\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 15).group_by(\"user_id\").aggregate(result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "avg_with_filter_2", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "90516437-b9fa-48fa-bf4d-b02453d96803", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS result\nFROM events\nWHERE amount > 20\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 20).group_by(\"user_id\").aggregate(result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "avg_with_filter_3", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "e16ddb72-8597-4e36-a5ab-ebbd1f75bda2", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, AVG(amount) AS result\nFROM events\nWHERE amount > 25\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 25).group_by(\"user_id\").aggregate(result=events.amount.mean())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "avg_with_filter_4", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "92dbf0d7-1d59-4d40-8c2f-2dc9da30ab18", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS result\nFROM events\nWHERE amount > 5\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 5).group_by(\"user_id\").aggregate(result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "max_with_filter_0", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "50ae965d-7cd6-427f-85a0-c4774f979ca0", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS result\nFROM events\nWHERE amount > 10\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 10).group_by(\"user_id\").aggregate(result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "max_with_filter_1", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "3b0ff336-76d9-4c5c-bf84-b2c4c66def4f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS result\nFROM events\nWHERE amount > 15\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 15).group_by(\"user_id\").aggregate(result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "max_with_filter_2", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "74288893-a6b0-4a51-a1cd-bd178f5a8a0b", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS result\nFROM events\nWHERE amount > 20\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 20).group_by(\"user_id\").aggregate(result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "max_with_filter_3", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "be0df169-936c-478d-a500-e068c8ae2069", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MAX(amount) AS result\nFROM events\nWHERE amount > 25\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 25).group_by(\"user_id\").aggregate(result=events.amount.max())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "max_with_filter_4", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "41957654-21ec-4a02-a5dc-f35b2655ca9f", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS result\nFROM events\nWHERE amount > 5\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 5).group_by(\"user_id\").aggregate(result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "min_with_filter_0", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "6e41c61b-9bba-4cd1-92ed-ba1f2400eac8", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS result\nFROM events\nWHERE amount > 10\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 10).group_by(\"user_id\").aggregate(result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "min_with_filter_1", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "b67ae8ce-f1ea-4e49-917b-79cbf00d8e59", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS result\nFROM events\nWHERE amount > 15\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 15).group_by(\"user_id\").aggregate(result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "min_with_filter_2", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "267a2c09-f5b5-4d07-aa14-ad82b94ba011", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS result\nFROM events\nWHERE amount > 20\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 20).group_by(\"user_id\").aggregate(result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "min_with_filter_3", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
{"id": "c99029c4-02f1-4027-8c7f-77efc1bcd92e", "task": "sql_to_ibis", "dialect": "duckdb", "backend": "duckdb", "ibis_version": "9.5.0", "context": {"tables": {"events": {"schema": {"user_id": "int64", "event_ts": "timestamp", "amount": "float64"}}}}, "input": {"sql": "SELECT user_id, MIN(amount) AS result\nFROM events\nWHERE amount > 25\nGROUP BY user_id"}, "target": {"ibis": "events.filter(events.amount > 25).group_by(\"user_id\").aggregate(result=events.amount.min())", "expr_name": "expr"}, "meta": {"template": "param_groupby_combos", "variation": "min_with_filter_4", "features": ["groupby", "aggregate", "parameterized"], "source": "synthetic", "difficulty": "medium"}}
