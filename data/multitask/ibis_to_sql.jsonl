{"id": "9671bb1f-87ed-4a11-9937-adf3d1e19d3c", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"age": "int64", "name": "string"}}}}, "input": {"ibis": "table.filter(table.age > 18)", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE age > 18\n"}, "meta": {"template": "filter_to_sql", "variation": "simple_numeric_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "87a7f886-fb8f-4977-b841-ecb6f4e5db5e", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"age": "int64", "is_active": "boolean"}}}}, "input": {"ibis": "table.filter((table.age > 18) & (table.is_active == True))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE (age > 18) AND (is_active = TRUE)\n"}, "meta": {"template": "filter_to_sql", "variation": "compound_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "82c945c6-2d43-4ea1-9345-244e94c1206f", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"name": "string", "age": "int64"}}}}, "input": {"ibis": "table.filter(table.name == 'Alice')", "dialect": "postgres"}, "target": {"sql": "SELECT *\nFROM table\nWHERE name = 'Alice'\n"}, "meta": {"template": "filter_to_sql", "variation": "string_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "f98edba7-daee-4940-ab19-351f6645db8f", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"status": "string"}}}}, "input": {"ibis": "table.filter((table.status == 'active') | (table.status == 'pending'))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE (status = 'active') OR (status = 'pending')\n"}, "meta": {"template": "filter_to_sql", "variation": "or_condition", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "bc11e2de-0477-4872-be32-4eadc2ea115b", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string"}}}}, "input": {"ibis": "table.filter(table.category.isin(['A', 'B', 'C']))", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE category IN ('A', 'B', 'C')\n"}, "meta": {"template": "filter_to_sql", "variation": "isin_filter", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "2a4a64a0-e161-4209-b06d-1c42b47e7d17", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"email": "string"}}}}, "input": {"ibis": "table.filter(table.email.notnull())", "dialect": "duckdb"}, "target": {"sql": "SELECT *\nFROM table\nWHERE email IS NOT NULL\n"}, "meta": {"template": "filter_to_sql", "variation": "null_check", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "abebdc66-558d-4632-8572-cab29473cfbc", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"user_id": "int64", "amount": "float64", "timestamp": "timestamp"}}}}, "input": {"ibis": "table.filter(table.amount > 100).select('user_id', 'amount')", "dialect": "duckdb"}, "target": {"sql": "SELECT user_id, amount\nFROM table\nWHERE amount > 100\n"}, "meta": {"template": "filter_to_sql", "variation": "filter_with_select", "difficulty": "easy", "features": ["filter", "where", "translation"]}}
{"id": "3a2e0159-f4e7-4a8e-a7fe-bd9dabca5dab", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(total=table.amount.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT category, SUM(amount) AS total\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "simple_groupby_sum", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "b66adbd0-4e64-478a-b326-4123c90ff60f", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"region": "string", "sales": "float64"}}}}, "input": {"ibis": "table.group_by('region').agg(total_sales=table.sales.sum(), avg_sales=table.sales.mean(), count=table.count())", "dialect": "postgres"}, "target": {"sql": "SELECT region, SUM(sales) AS total_sales, AVG(sales) AS avg_sales, COUNT(*) AS count\nFROM table\nGROUP BY region\n"}, "meta": {"template": "aggregation_to_sql", "variation": "multiple_aggregations", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9af46fbe-5648-4c41-b216-eeb9833530c3", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"page": "string", "user_id": "int64"}}}}, "input": {"ibis": "table.group_by('page').agg(unique_visitors=table.user_id.nunique())", "dialect": "duckdb"}, "target": {"sql": "SELECT page, COUNT(DISTINCT user_id) AS unique_visitors\nFROM table\nGROUP BY page\n"}, "meta": {"template": "aggregation_to_sql", "variation": "count_distinct", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "2a53d956-31a3-42c9-8d80-ffdb1311268a", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"region": "string", "category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by(['region', 'category']).agg(total=table.amount.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT region, category, SUM(amount) AS total\nFROM table\nGROUP BY region, category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "multiple_groupby_keys", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9acd9875-42b1-4832-94ac-979b41a6203c", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"customer_id": "int64"}}}}, "input": {"ibis": "result = table.group_by('customer_id').agg(order_count=table.count())\nresult.filter(result.order_count >= 10)", "dialect": "postgres"}, "target": {"sql": "SELECT customer_id, COUNT(*) AS order_count\nFROM table\nGROUP BY customer_id\nHAVING COUNT(*) >= 10\n"}, "meta": {"template": "aggregation_to_sql", "variation": "having_clause", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "a4adf0e1-8a41-4cb7-9ac2-749fa094e067", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"product": "string", "price": "float64"}}}}, "input": {"ibis": "table.group_by('product').agg(min_price=table.price.min(), max_price=table.price.max())", "dialect": "duckdb"}, "target": {"sql": "SELECT product, MIN(price) AS min_price, MAX(price) AS max_price\nFROM table\nGROUP BY product\n"}, "meta": {"template": "aggregation_to_sql", "variation": "min_max_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "9bd25956-4a35-43c8-af8f-bd769814d3aa", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "amount": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(high_value_count=(table.amount > 100).sum())", "dialect": "postgres"}, "target": {"sql": "SELECT category, SUM(CASE WHEN amount > 100 THEN 1 ELSE 0 END) AS high_value_count\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "conditional_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "6d8fd16a-b2c4-4a89-8dd0-1df6832ef61a", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "price": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(avg_price=table.price.mean(), std_price=table.price.std())", "dialect": "postgres"}, "target": {"sql": "SELECT category, AVG(price) AS avg_price, STDDEV(price) AS std_price\nFROM table\nGROUP BY category\n"}, "meta": {"template": "aggregation_to_sql", "variation": "std_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "0eb4cc04-07c2-4aba-8d44-828a23c5793a", "task": "ibis_to_sql", "dialect": "duckdb", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"year": "int64", "region": "string", "sales": "float64"}}}}, "input": {"ibis": "table.filter(table.year == 2024).group_by('region').agg(total=table.sales.sum())", "dialect": "duckdb"}, "target": {"sql": "SELECT region, SUM(sales) AS total\nFROM table\nWHERE year = 2024\nGROUP BY region\n"}, "meta": {"template": "aggregation_to_sql", "variation": "filter_before_aggregation", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
{"id": "fd62b0a8-b80b-4d4c-8fc3-637965ffb657", "task": "ibis_to_sql", "dialect": "postgres", "system_prompt": "You are an expert in Ibis and SQL.\nTranslate the Ibis expression to equivalent SQL for the specified dialect.\nOutput only the SQL query.", "context": {"tables": {"table": {"schema": {"category": "string", "sales": "float64"}}}}, "input": {"ibis": "table.group_by('category').agg(total=table.sales.sum()).order_by(ibis.desc('total'))", "dialect": "postgres"}, "target": {"sql": "SELECT category, SUM(sales) AS total\nFROM table\nGROUP BY category\nORDER BY total DESC\n"}, "meta": {"template": "aggregation_to_sql", "variation": "aggregation_with_order", "difficulty": "medium", "features": ["aggregation", "group_by", "translation"]}}
