{"id": "24278d06-7c2f-4f11-a455-18ff380e51cb", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_adult_users(table):\n    return table.filter(table.age >= 18)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get adult users from the table.\n\nArgs:\n    table: Ibis table containing user data with age column\n\nReturns:\n    Filtered table containing only users aged 18 and above\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "simple_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "350bf53f-d0c1-45dd-8c58-f7f69636c4c6", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_adult_users(table):\n    return table.filter(table.age >= 18)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get adult users from the table.\n\nParameters\n----------\ntable : ibis.Table\n    Ibis table containing user data with age column\n\nReturns\n-------\nibis.Table\n    Filtered table containing only users aged 18 and above\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "simple_filter_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "07b29d4f-3da0-41bc-8414-ae570143cde6", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_active_adults(table):\n    return table.filter((table.age >= 18) & table.is_active)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get active adult users from the table.\n\nFilters for users who are both 18 or older and have active status.\n\nArgs:\n    table: Ibis table with age (int) and is_active (bool) columns\n\nReturns:\n    Filtered table containing only active adult users\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "compound_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "0eeef814-6b9a-4412-bbdc-77226ed16277", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_user_info(table):\n    return table.select('user_id', 'name', 'email')\n", "style": "google"}, "target": {"docstring": "\"\"\"Get basic user information columns.\n\nArgs:\n    table: Ibis table containing user data\n\nReturns:\n    Table with only user_id, name, and email columns\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "select_columns_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "d5a1801f-8963-45ac-81a7-8c2b755e905d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_high_value_transactions(transactions, threshold=1000):\n    return transactions.filter(transactions.amount > threshold).select('transaction_id', 'amount', 'user_id')\n", "style": "google"}, "target": {"docstring": "\"\"\"Get high-value transactions above a threshold.\n\nArgs:\n    transactions: Ibis table containing transaction data\n    threshold: Minimum transaction amount (default: 1000)\n\nReturns:\n    Table with transaction_id, amount, and user_id for transactions\n    exceeding the threshold\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_and_select_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "6bc30e7b-d7ed-4eae-bc65-a7dfab6c125c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def remove_null_emails(users):\n    return users.filter(users.email.notnull())\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Remove users with null email addresses.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table containing only users with non-null email addresses\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_null_values_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "24486484-9c09-41a8-b941-08438e9cf666", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_users_by_status(table, statuses):\n    return table.filter(table.status.isin(statuses))\n", "style": "google"}, "target": {"docstring": "\"\"\"Get users with specific status values.\n\nArgs:\n    table: Ibis table containing user data with status column\n    statuses: List of status values to filter for\n\nReturns:\n    Table containing users whose status is in the provided list\n\nExample:\n    >>> get_users_by_status(users, ['active', 'pending'])\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "filter_by_list_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "301616b0-1cfd-495d-8caa-86c9462b2582", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_recent_events(events, since_date):\n    return events.filter(events.created_at >= since_date)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get events created on or after a specific date.\n\nArgs:\n    events: Ibis table containing event data with created_at timestamp\n    since_date: Minimum date/timestamp for filtering\n\nReturns:\n    Table containing events from the specified date onwards\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "temporal_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "1ed1c52e-9275-45b5-a3fd-114d5e3bf03f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_users_by_name_pattern(users, pattern):\n    return users.filter(users.name.like(pattern))\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Find users whose names match a pattern.\n\nParameters\n----------\nusers : ibis.Table\n    User table with name column\npattern : str\n    SQL LIKE pattern (use % as wildcard)\n\nReturns\n-------\nibis.Table\n    Users whose names match the pattern\n\nExamples\n--------\n>>> find_users_by_name_pattern(users, 'John%')  # Names starting with John\n>>> find_users_by_name_pattern(users, '%smith%')  # Names containing smith\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "string_pattern_filter_numpy", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "numpy"}}
{"id": "180ae954-1685-404f-93d3-0008527679dc", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_premium_active_users(users, min_age=18, min_spend=500):\n    return users.filter(\n        (users.age >= min_age) &\n        users.is_active &\n        (users.total_spend >= min_spend)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Get premium active users based on multiple criteria.\n\nFilters for users who are:\n- At least the minimum age\n- Currently active\n- Have spent at least the minimum amount\n\nArgs:\n    users: Ibis table with age, is_active, and total_spend columns\n    min_age: Minimum age requirement (default: 18)\n    min_spend: Minimum total spending requirement (default: 500)\n\nReturns:\n    Table containing users meeting all premium criteria\n\"\"\"\n"}, "meta": {"template": "filter_functions_docs", "variation": "complex_filter_google", "difficulty": "easy", "features": ["documentation", "filter", "select"], "style": "google"}}
{"id": "ffe4b60e-9fae-4543-8041-961cff399918", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_by_region(sales):\n    return sales.group_by('region').agg(total_sales=sales.amount.sum())\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate total sales for each region.\n\nArgs:\n    sales: Ibis table containing sales data with region and amount columns\n\nReturns:\n    Table with region and total_sales columns, one row per region\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "simple_groupby_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1467de62-3632-4769-a0dd-de494a28d9f5", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_summary(sales):\n    return sales.group_by('region').agg(\n        total=sales.amount.sum(),\n        average=sales.amount.mean(),\n        count=sales.count()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Generate comprehensive sales summary by region.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with region and amount columns\n\nReturns\n-------\nibis.Table\n    Summary table with columns:\n    - region: Geographic region\n    - total: Total sales amount\n    - average: Mean sales amount\n    - count: Number of transactions\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "multiple_aggregations_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "f839f808-db06-4e2d-9ef5-51f6787ecd74", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def count_events_by_type(events):\n    return events.group_by('event_type').agg(count=events.count())\n", "style": "google"}, "target": {"docstring": "\"\"\"Count events by type.\n\nArgs:\n    events: Ibis table with event_type column\n\nReturns:\n    Table showing count of events for each event type\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "count_by_category_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1a9eccc7-0ca4-47c3-bfae-3064b0c1166f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def high_value_transaction_stats(transactions):\n    return transactions.group_by('user_id').agg(\n        high_value_count=(transactions.amount > 1000).sum(),\n        high_value_total=(transactions.amount * (transactions.amount > 1000)).sum()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate high-value transaction statistics per user.\n\nComputes metrics for transactions exceeding $1000.\n\nArgs:\n    transactions: Transaction table with user_id and amount columns\n\nReturns:\n    Table with user_id, count of high-value transactions, and their total amount\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "conditional_aggregation_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "5a7e43a8-0608-4866-9a81-04c804df167d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_by_region_and_product(sales):\n    return sales.group_by(['region', 'product_id']).agg(\n        total_sales=sales.amount.sum(),\n        units_sold=sales.quantity.sum()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Aggregate sales by region and product.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with region, product_id, amount, and quantity columns\n\nReturns\n-------\nibis.Table\n    Grouped table with columns:\n    - region: Geographic region\n    - product_id: Product identifier\n    - total_sales: Sum of sale amounts\n    - units_sold: Total quantity sold\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "multiple_groupby_keys_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "f1a6a940-b0c1-4aa1-9ee9-0cccbb62c911", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def price_range_by_category(products):\n    return products.group_by('category').agg(\n        min_price=products.price.min(),\n        max_price=products.price.max(),\n        avg_price=products.price.mean()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate price range statistics by product category.\n\nArgs:\n    products: Product table with category and price columns\n\nReturns:\n    Table with min, max, and average prices for each category\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "min_max_aggregation_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "1813359f-03b8-4ebe-be39-32e622fb05f9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_high_volume_customers(orders, min_orders=10):\n    result = orders.group_by('customer_id').agg(order_count=orders.count())\n    return result.filter(result.order_count >= min_orders)\n", "style": "google"}, "target": {"docstring": "\"\"\"Get customers with high order volume.\n\nArgs:\n    orders: Order table with customer_id column\n    min_orders: Minimum number of orders required (default: 10)\n\nReturns:\n    Table with customer_id and order_count for customers meeting\n    the minimum order threshold\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "having_clause_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "cec386ac-8450-4b09-a85b-e73cf8c087ec", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def customer_lifetime_value(transactions):\n    return transactions.group_by('customer_id').agg(\n        total_spent=transactions.amount.sum(),\n        avg_transaction=transactions.amount.mean(),\n        transaction_count=transactions.count(),\n        first_purchase=transactions.purchase_date.min(),\n        last_purchase=transactions.purchase_date.max()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate customer lifetime value metrics.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with customer_id, amount, and purchase_date columns\n\nReturns\n-------\nibis.Table\n    Customer metrics including:\n    - customer_id: Customer identifier\n    - total_spent: Lifetime spending\n    - avg_transaction: Average transaction amount\n    - transaction_count: Total number of transactions\n    - first_purchase: Date of first purchase\n    - last_purchase: Date of most recent purchase\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "complex_aggregation_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "d56a6993-f8ef-4f3c-b90b-95b0f9e76e4a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def unique_visitors_by_page(visits):\n    return visits.group_by('page_url').agg(\n        unique_visitors=visits.user_id.nunique(),\n        total_visits=visits.count()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Count unique visitors and total visits per page.\n\nArgs:\n    visits: Visit log table with page_url and user_id columns\n\nReturns:\n    Table showing unique visitor count and total visit count for each page\n\nExample:\n    >>> unique_visitors_by_page(visit_logs)\n    # Shows pages with their unique and total visitor counts\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "distinct_count_google", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "google"}}
{"id": "50bc3f35-c1e4-4136-b831-349e60a7acb8", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def analyze_price_variability(products):\n    return products.group_by('category').agg(\n        avg_price=products.price.mean(),\n        std_price=products.price.std(),\n        price_variance=products.price.var()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Analyze price variability by product category.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with category and price columns\n\nReturns\n-------\nibis.Table\n    Statistical summary with columns:\n    - category: Product category\n    - avg_price: Mean price\n    - std_price: Standard deviation of prices\n    - price_variance: Variance of prices\n\nNotes\n-----\nUseful for identifying categories with inconsistent pricing.\n\"\"\"\n"}, "meta": {"template": "aggregation_functions_docs", "variation": "stddev_aggregation_numpy", "difficulty": "medium", "features": ["documentation", "aggregation", "group_by"], "style": "numpy"}}
{"id": "46796a6c-2354-4c5c-b244-e93e9254c84c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def enrich_orders_with_customers(orders, customers):\n    return orders.join(customers, orders.customer_id == customers.customer_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Enrich order data with customer information.\n\nPerforms an inner join to add customer details to orders.\n\nArgs:\n    orders: Order table with customer_id column\n    customers: Customer table with customer_id and customer details\n\nReturns:\n    Combined table with all columns from both orders and customers\n    for matching customer_ids\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "inner_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "b1366cba-bb40-46d3-9b56-925a03257e44", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_users_with_optional_profiles(users, profiles):\n    return users.left_join(profiles, users.user_id == profiles.user_id)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get all users with their profile data if available.\n\nPerforms a left join to include all users, with profile data\nwhere it exists.\n\nParameters\n----------\nusers : ibis.Table\n    User table with user_id column\nprofiles : ibis.Table\n    Profile table with user_id and profile information\n\nReturns\n-------\nibis.Table\n    Table with all users; profile columns will be null for users\n    without profiles\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "left_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "a5780600-b74f-4739-8416-2deee6309515", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_order_summary(orders, customers, products):\n    return (orders\n        .join(customers, orders.customer_id == customers.customer_id)\n        .join(products, orders.product_id == products.product_id))\n", "style": "google"}, "target": {"docstring": "\"\"\"Create comprehensive order summary with customer and product details.\n\nJoins orders with customers and products to create a denormalized view.\n\nArgs:\n    orders: Order table with customer_id and product_id\n    customers: Customer table with customer details\n    products: Product table with product details\n\nReturns:\n    Denormalized table combining order, customer, and product information\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "multiple_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "ee3ba951-3997-4227-8c0d-71d3633c02fd", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_employee_managers(employees):\n    managers = employees.relabel({'employee_id': 'manager_id', 'name': 'manager_name'})\n    return employees.join(managers, employees.manager_id == managers.manager_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Find each employee with their manager's information.\n\nPerforms a self-join to associate employees with their managers.\n\nArgs:\n    employees: Employee table with employee_id, manager_id, and name columns\n\nReturns:\n    Table with employee information plus their manager's name\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "self_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "4257a8af-aaf0-401b-96ae-cfb24e2bc0d7", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def compare_sales_targets(actual_sales, sales_targets):\n    return actual_sales.outer_join(\n        sales_targets,\n        actual_sales.region == sales_targets.region\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Compare actual sales with targets for all regions.\n\nUses outer join to include regions with targets but no sales,\nand regions with sales but no targets.\n\nParameters\n----------\nactual_sales : ibis.Table\n    Table with region and actual sales data\nsales_targets : ibis.Table\n    Table with region and target sales data\n\nReturns\n-------\nibis.Table\n    Table showing both actual and target data for all regions;\n    null values indicate missing data in either table\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "outer_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "26adbe19-1a0b-4cc2-9951-9efa81b8bbaa", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_recent_high_value_orders(orders, customers, since_date, min_amount):\n    return (orders\n        .filter((orders.order_date >= since_date) & (orders.amount >= min_amount))\n        .join(customers, orders.customer_id == customers.customer_id))\n", "style": "google"}, "target": {"docstring": "\"\"\"Get recent high-value orders with customer details.\n\nFilters orders by date and amount before joining with customer data.\n\nArgs:\n    orders: Order table with order_date, amount, and customer_id\n    customers: Customer table with customer details\n    since_date: Earliest order date to include\n    min_amount: Minimum order amount to include\n\nReturns:\n    High-value recent orders enriched with customer information\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "join_with_filter_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "d5d49404-55f1-4f18-9fe9-59342e2097b3", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def join_regional_sales(sales_a, sales_b):\n    return sales_a.join(\n        sales_b,\n        (sales_a.region == sales_b.region) & (sales_a.quarter == sales_b.quarter)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Join sales data from two sources by region and quarter.\n\nParameters\n----------\nsales_a : ibis.Table\n    First sales table with region and quarter columns\nsales_b : ibis.Table\n    Second sales table with region and quarter columns\n\nReturns\n-------\nibis.Table\n    Combined sales data matched on both region and quarter\n\nNotes\n-----\nOnly includes rows where both region and quarter match between tables.\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "multiple_join_keys_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "b1344c41-cd21-4c7e-86ec-9b334cc23f9b", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def customer_order_summary(customers, orders):\n    order_stats = orders.group_by('customer_id').agg(\n        total_orders=orders.count(),\n        total_spent=orders.amount.sum()\n    )\n    return customers.join(order_stats, customers.customer_id == order_stats.customer_id)\n", "style": "google"}, "target": {"docstring": "\"\"\"Create customer summary with order statistics.\n\nAggregates order data and joins with customer information.\n\nArgs:\n    customers: Customer table with customer_id and customer details\n    orders: Order table with customer_id and amount columns\n\nReturns:\n    Table with customer details plus total_orders and total_spent\n    for each customer\n\nExample:\n    >>> summary = customer_order_summary(customers, orders)\n    >>> summary[['customer_id', 'name', 'total_orders', 'total_spent']]\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "join_with_aggregation_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "65b89e1e-6fde-4f40-85af-e7eeb0b4397f", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_customers_without_orders(customers, orders):\n    return customers.left_join(\n        orders, customers.customer_id == orders.customer_id\n    ).filter(orders.order_id.isnull())\n", "style": "google"}, "target": {"docstring": "\"\"\"Find customers who have never placed an order.\n\nUses left join followed by null filtering to identify customers\nwith no matching orders.\n\nArgs:\n    customers: Customer table with customer_id\n    orders: Order table with customer_id and order_id\n\nReturns:\n    Table of customers with no orders (anti-join result)\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "anti_join_google", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "google"}}
{"id": "c1f9dc24-e13d-4da5-ae22-c10f46d27eab", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_active_products(products, recent_orders):\n    return products.semi_join(recent_orders, products.product_id == recent_orders.product_id)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get products that have been ordered recently.\n\nReturns products that appear in recent orders without duplicating\nrows or adding order columns.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with product_id and product details\nrecent_orders : ibis.Table\n    Recent order table with product_id column\n\nReturns\n-------\nibis.Table\n    Products that exist in recent_orders, with product columns only\n\nNotes\n-----\nSemi-join returns only products table columns, unlike inner join\nwhich would include order columns and create duplicates.\n\"\"\"\n"}, "meta": {"template": "join_functions_docs", "variation": "semi_join_numpy", "difficulty": "medium", "features": ["documentation", "join", "merge"], "style": "numpy"}}
{"id": "ec87054f-8e3f-4b7d-9c9c-d1b79beb67dd", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def rank_sales_by_region(sales):\n    window = ibis.window(group_by='region', order_by=ibis.desc('amount'))\n    return sales.mutate(rank=ibis.row_number().over(window))\n", "style": "google"}, "target": {"docstring": "\"\"\"Rank sales within each region by amount.\n\nAssigns a sequential rank to each sale within its region,\nordered by amount (highest first).\n\nArgs:\n    sales: Sales table with region and amount columns\n\nReturns:\n    Sales table with added rank column (1 = highest amount in region)\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "row_number_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "76135dc2-86cd-48ab-b0ce-fe1dc7431ab1", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_running_total(transactions):\n    window = ibis.window(order_by='transaction_date', rows=(None, 0))\n    return transactions.mutate(running_total=transactions.amount.sum().over(window))\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate running total of transaction amounts.\n\nComputes cumulative sum of amounts ordered by transaction date.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with transaction_date and amount columns\n\nReturns\n-------\nibis.Table\n    Original table with running_total column showing cumulative sum\n    up to and including each row\n\nNotes\n-----\nUses rows between unbounded preceding and current row.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "running_total_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "a4f7126d-91c7-4136-9e1a-963db6a3381d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_moving_average(daily_sales, window_days=7):\n    window = ibis.window(order_by='sale_date', rows=(window_days-1, 0))\n    return daily_sales.mutate(moving_avg=daily_sales.amount.mean().over(window))\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate moving average of sales over a window.\n\nArgs:\n    daily_sales: Table with sale_date and amount columns\n    window_days: Number of days to include in average (default: 7)\n\nReturns:\n    Table with moving_avg column showing average of current and\n    previous (window_days - 1) days\n\nExample:\n    >>> calculate_moving_average(sales, window_days=30)  # 30-day moving average\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "moving_average_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "5707d504-2e21-4f2a-91e3-efe46dd3b1b9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def compare_with_previous(metrics):\n    window = ibis.window(order_by='metric_date')\n    return metrics.mutate(\n        previous_value=metrics.value.lag().over(window),\n        next_value=metrics.value.lead().over(window),\n        change_from_prev=metrics.value - metrics.value.lag().over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Add previous and next values for comparison.\n\nAdds columns showing the value from the previous row, next row,\nand change from previous.\n\nArgs:\n    metrics: Time-series table with metric_date and value columns\n\nReturns:\n    Table with added columns:\n    - previous_value: Value from previous row\n    - next_value: Value from next row\n    - change_from_prev: Difference from previous value\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "lag_lead_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "0150458e-2bc6-4f8e-88c3-8b2b93ca6a5e", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def top_products_per_category(products):\n    window = ibis.window(group_by='category', order_by=ibis.desc('sales'))\n    ranked = products.mutate(rank=ibis.row_number().over(window))\n    return ranked.filter(ranked.rank <= 5)\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Get top 5 products by sales in each category.\n\nParameters\n----------\nproducts : ibis.Table\n    Product table with category and sales columns\n\nReturns\n-------\nibis.Table\n    Top 5 products per category, ranked by sales (highest first)\n\nExamples\n--------\n>>> top_products_per_category(product_sales)\n# Returns rank 1-5 products for each category\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "partition_rank_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "dc353599-fc90-4cc4-a96c-70233e13e23a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_percentile_ranks(students):\n    window = ibis.window(order_by=ibis.desc('test_score'))\n    return students.mutate(\n        percentile=ibis.percent_rank().over(window) * 100\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate percentile rank for student test scores.\n\nArgs:\n    students: Table with test_score column\n\nReturns:\n    Table with percentile column (0-100) showing each student's\n    relative position (100 = highest score)\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "percent_rank_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "335f8603-202c-49d8-84f5-77d4e7c5e19d", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def get_period_bounds(daily_metrics):\n    window = ibis.window(group_by='month', order_by='date')\n    return daily_metrics.mutate(\n        month_start_value=daily_metrics.value.first().over(window),\n        month_end_value=daily_metrics.value.last().over(window)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Add first and last values for each month.\n\nParameters\n----------\ndaily_metrics : ibis.Table\n    Daily metrics with month, date, and value columns\n\nReturns\n-------\nibis.Table\n    Table with added columns:\n    - month_start_value: First value in the month\n    - month_end_value: Last value in the month\n\nNotes\n-----\nUseful for calculating monthly changes or identifying trends.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "first_last_value_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "455d0611-d226-4321-834f-ca2a53217acf", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def rank_with_ties(competition_results):\n    window = ibis.window(order_by=ibis.desc('score'))\n    return competition_results.mutate(\n        rank=ibis.dense_rank().over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Rank competition results handling ties appropriately.\n\nUses dense_rank to ensure tied scores get the same rank, with\nno gaps in rank values.\n\nArgs:\n    competition_results: Table with score column\n\nReturns:\n    Table with rank column (ties receive same rank, ranks are consecutive)\n\nExample:\n    Scores [100, 95, 95, 90] get ranks [1, 2, 2, 3] (not [1, 2, 2, 4])\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "dense_rank_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "4b7258c5-616b-4fe1-aaf7-5b54fa64a155", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_quartiles(customer_values):\n    window = ibis.window(order_by='lifetime_value')\n    return customer_values.mutate(\n        quartile=ibis.ntile(4).over(window)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Divide customers into quartiles by lifetime value.\n\nArgs:\n    customer_values: Table with lifetime_value column\n\nReturns:\n    Table with quartile column (1-4) indicating which quartile\n    each customer belongs to\n\nNotes:\n    Quartile 1 = lowest 25%, Quartile 4 = highest 25%\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "ntile_google", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "google"}}
{"id": "70f8b579-5d47-4ca0-a073-150609e081ac", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def sales_analytics(sales):\n    category_window = ibis.window(group_by='category', order_by=ibis.desc('amount'))\n    time_window = ibis.window(order_by='sale_date', rows=(6, 0))\n    return sales.mutate(\n        category_rank=ibis.row_number().over(category_window),\n        weekly_avg=sales.amount.mean().over(time_window),\n        pct_of_category=sales.amount / sales.amount.sum().over(category_window) * 100\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Generate comprehensive sales analytics with multiple window functions.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with category, amount, and sale_date columns\n\nReturns\n-------\nibis.Table\n    Sales table enriched with:\n    - category_rank: Rank within category by amount\n    - weekly_avg: 7-day moving average\n    - pct_of_category: Percentage of total category sales\n\nNotes\n-----\nDemonstrates using multiple window specifications in a single operation.\n\"\"\"\n"}, "meta": {"template": "window_functions_docs", "variation": "complex_window_numpy", "difficulty": "hard", "features": ["documentation", "window", "analytics"], "style": "numpy"}}
{"id": "c1e4dfb5-211b-4ecb-8280-7ba0390d6697", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def create_full_name(users):\n    return users.mutate(full_name=users.first_name + ' ' + users.last_name)\n", "style": "google"}, "target": {"docstring": "\"\"\"Create full name by concatenating first and last names.\n\nArgs:\n    users: User table with first_name and last_name columns\n\nReturns:\n    Table with added full_name column (first_name + space + last_name)\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_concatenation_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "0d9f772b-f25f-447d-88d0-296e39e9a974", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def normalize_email_addresses(users):\n    return users.mutate(\n        email_normalized=users.email.lower().strip()\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Normalize email addresses to lowercase and remove whitespace.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table with email_normalized column containing trimmed,\n    lowercase email addresses\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_case_conversion_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "7c640342-798d-48f2-832e-c465735289c9", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_area_code(phone_numbers):\n    return phone_numbers.mutate(\n        area_code=phone_numbers.phone.substr(0, 3)\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract area code from phone numbers.\n\nExtracts first 3 characters as area code.\n\nArgs:\n    phone_numbers: Table with phone column\n\nReturns:\n    Table with area_code column containing first 3 digits\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "substring_extraction_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "904cdf7f-1f43-4d42-aacf-78c57ca0ea0a", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def find_gmail_users(users):\n    return users.filter(users.email.like('%@gmail.com'))\n", "style": "google"}, "target": {"docstring": "\"\"\"Filter for users with Gmail addresses.\n\nArgs:\n    users: User table with email column\n\nReturns:\n    Table containing only users with @gmail.com email addresses\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_pattern_matching_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "f7f726aa-a09f-4b97-ab9d-84f3feced9e5", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_domain_from_email(users):\n    return users.mutate(\n        domain=users.email.re_extract(r'@(.+)$', 1)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Extract domain name from email addresses.\n\nUses regex to extract text after @ symbol.\n\nParameters\n----------\nusers : ibis.Table\n    User table with email column\n\nReturns\n-------\nibis.Table\n    Table with domain column containing email domain\n    (e.g., 'gmail.com' from 'user@gmail.com')\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "regex_extraction_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "641c3ad7-1046-4218-9d8a-d07be190f832", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_date_parts(events):\n    return events.mutate(\n        year=events.event_date.year(),\n        month=events.event_date.month(),\n        day=events.event_date.day()\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract year, month, and day from event dates.\n\nArgs:\n    events: Event table with event_date timestamp column\n\nReturns:\n    Table with added year, month, and day columns as integers\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_extraction_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "b03db1e2-44fa-4e4e-b937-5d427c727692", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def add_expiration_date(subscriptions, days=30):\n    return subscriptions.mutate(\n        expiration_date=subscriptions.start_date + ibis.interval(days=days)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Calculate subscription expiration dates.\n\nAdds specified number of days to start date.\n\nParameters\n----------\nsubscriptions : ibis.Table\n    Subscription table with start_date column\ndays : int, optional\n    Number of days until expiration (default: 30)\n\nReturns\n-------\nibis.Table\n    Table with expiration_date column\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_arithmetic_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "b1ea28fe-8f99-479b-8d28-7db0f02a253c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def calculate_customer_age(customers):\n    return customers.mutate(\n        days_since_signup=(ibis.now() - customers.signup_date).to_unit('D')\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Calculate how many days since each customer signed up.\n\nArgs:\n    customers: Customer table with signup_date column\n\nReturns:\n    Table with days_since_signup column showing days elapsed\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_difference_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "28b30aca-f7a8-4a3b-9238-6934ed50ee4e", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def group_by_month(transactions):\n    return transactions.mutate(\n        month=transactions.transaction_date.truncate('M')\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Truncate transaction dates to month for grouping.\n\nParameters\n----------\ntransactions : ibis.Table\n    Transaction table with transaction_date column\n\nReturns\n-------\nibis.Table\n    Table with month column showing first day of each month\n\nNotes\n-----\nUseful for monthly aggregations and time-series analysis.\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_truncation_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "976129e2-ab78-48af-a6d4-1fb4a222f3fa", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def filter_by_comment_length(posts, min_length=10):\n    return posts.filter(posts.comment.length() >= min_length)\n", "style": "google"}, "target": {"docstring": "\"\"\"Filter posts with comments above minimum length.\n\nArgs:\n    posts: Post table with comment column\n    min_length: Minimum comment length in characters (default: 10)\n\nReturns:\n    Posts with comments of at least min_length characters\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_length_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "373b328c-2e78-47c0-a598-0fa178051e76", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def clean_phone_numbers(contacts):\n    return contacts.mutate(\n        phone_cleaned=contacts.phone.replace('-', '').replace('(', '').replace(')', '')\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Remove formatting characters from phone numbers.\n\nRemoves dashes, parentheses, and other formatting.\n\nParameters\n----------\ncontacts : ibis.Table\n    Contact table with phone column\n\nReturns\n-------\nibis.Table\n    Table with phone_cleaned column containing only digits\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_replacement_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
{"id": "324e282b-fe80-4531-ad30-4fe56a008ded", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def format_dates_for_display(events):\n    return events.mutate(\n        date_display=events.event_date.strftime('%Y-%m-%d %H:%M')\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Format event dates for display.\n\nArgs:\n    events: Event table with event_date timestamp column\n\nReturns:\n    Table with date_display column in 'YYYY-MM-DD HH:MM' format\n\nExample:\n    >>> format_dates_for_display(events)\n    # date_display: '2024-03-15 14:30'\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "date_formatting_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "611ec678-c9aa-4e0f-8705-8a26ac730e1c", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def extract_first_word(products):\n    return products.mutate(\n        brand=products.product_name.split(' ')[0]\n    )\n", "style": "google"}, "target": {"docstring": "\"\"\"Extract first word from product names as brand.\n\nArgs:\n    products: Product table with product_name column\n\nReturns:\n    Table with brand column containing first word of product_name\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "string_splitting_google", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "google"}}
{"id": "fb99cbf6-ad11-4862-9585-f16934f36945", "task": "documentation", "system_prompt": "You are an expert in Ibis and Python documentation.\nGenerate a docstring for the provided function in the specified style.\nOutput only the docstring, properly formatted.", "input": {"code": "def add_weekday_info(sales):\n    return sales.mutate(\n        day_of_week=sales.sale_date.day_of_week.full_name(),\n        is_weekend=(sales.sale_date.day_of_week.index() >= 5)\n    )\n", "style": "numpy"}, "target": {"docstring": "\"\"\"Add weekday name and weekend indicator.\n\nParameters\n----------\nsales : ibis.Table\n    Sales table with sale_date column\n\nReturns\n-------\nibis.Table\n    Table with added columns:\n    - day_of_week: Name of day (Monday, Tuesday, etc.)\n    - is_weekend: Boolean indicating if sale was on weekend\n\nNotes\n-----\nWeekend is defined as Saturday (5) or Sunday (6).\n\"\"\"\n"}, "meta": {"template": "string_temporal_functions_docs", "variation": "weekday_extraction_numpy", "difficulty": "medium", "features": ["documentation", "strings", "temporal", "dates"], "style": "numpy"}}
